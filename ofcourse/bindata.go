// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/Dockerfile
// templates/Makefile
// templates/cmd/check/main.go
// templates/cmd/in/main.go
// templates/cmd/out/main.go
// templates/go.mod
// templates/pipeline.yml
// templates/resource/resource.go
package ofcourse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x3d\x4b\xc5\x30\x14\xc6\xf1\xfd\x7c\x8a\x67\xea\x20\x24\x87\x82\x93\xe0\x20\x8a\x2f\x88\xa6\x04\x45\x04\x97\xbe\xc4\x10\x4c\x73\x4a\x92\xfa\xf9\xef\xd0\xde\xa1\xdc\xf1\xf0\xe7\x3c\xfc\x1e\xad\x79\x83\x97\xd8\x27\x7f\xd3\xea\xb6\xd5\xd7\xe8\x0b\x86\x35\xc4\xc9\x65\xa2\x7b\xd3\x7d\x43\x83\x47\x99\x1c\xd1\x97\xb1\xaf\x0f\x2f\xf6\x7c\xda\xcf\x77\xac\xa9\xb8\x8a\x27\xd3\xdd\x7d\x3c\xa3\x69\xf0\x43\x00\xe0\x05\xd5\x95\x0a\xf5\x0f\xcd\x5a\xeb\x43\x09\xa9\xd4\x3e\xc6\xad\x10\x5d\x0a\xb6\xe5\xf9\x6f\x0a\x19\x6a\x01\xcb\x52\x39\xbb\x22\x6b\x1e\xdd\x4e\x52\xea\x37\xcb\x7c\xbb\x3b\xc1\x59\xa4\xb2\x17\x1e\x42\xe2\xab\xe3\x07\xd3\x29\x00\x00\xff\xff\x43\x64\x48\x57\xe4\x00\x00\x00")

func dockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerfile,
		"Dockerfile",
	)
}

func dockerfile() (*asset, error) {
	bytes, err := dockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dockerfile", size: 228, mode: os.FileMode(420), modTime: time.Unix(1545362408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcc\xc1\x4a\x03\x31\x10\xc6\xf1\x73\xe6\x29\x3e\x4a\xa0\xad\x90\xf1\xbe\xc5\x9b\x1e\xbc\x28\x54\xf0\x24\x48\x75\x66\x62\x70\x37\x81\x24\x5a\xa4\xf6\xdd\x65\xb5\x5e\x3c\x79\xfb\xf8\x31\xff\x49\x26\x6a\xb8\xbf\xda\xde\x5d\xdf\xde\x90\x94\xe7\x57\xad\x8f\x55\x63\x6a\xbd\x7e\xe0\x02\x87\x03\xf8\xf2\x5b\xb7\xbf\x78\x3c\x0e\x7e\x75\x2a\xd6\xa4\x63\xd3\xff\x76\xa4\x59\x92\xd1\xe9\x7c\x20\xf7\x33\xf0\xf4\x96\x46\x41\xe8\xf0\xab\x3f\x9f\xd6\x60\xa2\xae\xad\x0f\xe4\x62\xc1\xbc\x10\xde\xc1\xe7\xcc\x4c\x64\xd3\xec\x96\xb2\x80\x11\xf2\x6e\x52\x2c\xcf\x38\x96\x25\x3e\xb1\x7f\x49\xa3\xa2\xea\x4e\x10\x2a\x6c\x03\x29\x78\x20\xe7\x62\xb1\xa9\x23\xec\x11\x1a\x16\xde\xdb\x62\x33\xb3\x94\xac\xf4\x15\x00\x00\xff\xff\xbb\xb8\xb8\x4f\x0c\x01\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 268, mode: os.FileMode(420), modTime: time.Unix(1545362791, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdCheckMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xbd\x0a\xc3\x20\x14\xc5\xf1\x39\xe7\x29\xc4\xa1\xe8\xa2\x0f\xd1\xa9\x5b\xe9\x1b\x98\x5b\x13\x25\x35\x37\xf8\x31\x89\xef\x5e\x08\x4d\xb7\xff\xe1\xc0\xef\x70\xb4\xb9\xd5\x8b\xe4\xe2\x0e\xc4\x74\x70\xae\x42\x61\x92\xbd\x0b\xf3\x38\xe7\xd3\xd5\x20\xc6\xb0\xd9\x17\x6e\x99\xbc\xc4\x24\xd7\x58\x43\x9b\x0d\x71\xb2\xf4\xe1\xf6\x9e\xb9\x14\xcb\x0b\x71\xcb\xc5\xff\x43\x42\x03\x4b\xdb\xe9\xe4\x95\x16\x1d\xd3\xf5\x99\x7b\xf0\xb4\xa9\xdb\xa5\x9a\xd7\x2f\xfa\xd0\x18\xf8\x06\x00\x00\xff\xff\x7d\x4e\xa3\xf9\x98\x00\x00\x00")

func cmdCheckMainGoBytes() ([]byte, error) {
	return bindataRead(
		_cmdCheckMainGo,
		"cmd/check/main.go",
	)
}

func cmdCheckMainGo() (*asset, error) {
	bytes, err := cmdCheckMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/check/main.go", size: 152, mode: os.FileMode(420), modTime: time.Unix(1545364451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdInMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x31\x0e\xc3\x20\x0c\x45\x77\x9f\xc2\x62\xa8\x60\x81\x73\x64\xab\x7a\x03\xe2\x92\x04\xb5\xe0\x08\xf0\x84\xb8\x7b\xa5\x28\x49\x3d\x3d\x59\x4f\xff\xed\x9e\x3e\x7e\x0d\x98\x7c\xcc\x00\x31\xed\x5c\x1a\x6a\xc0\xf3\x54\xef\x68\xa7\xe3\xfb\xf4\x6d\xc3\x31\x5c\x09\x95\xa5\x50\x50\x7f\x69\x8d\x6d\x93\xd9\x12\x27\x47\x5f\x96\xf7\xcc\xb5\x3a\x5e\x88\xa5\xd4\x70\x83\x02\x03\xb0\x48\xa6\x23\xa6\x0d\xf6\x7b\xe1\x52\xec\x94\xf5\xe3\x0a\xd8\xd7\x09\x7d\x18\x18\xf0\x0b\x00\x00\xff\xff\x29\x86\x1f\xc2\xaa\x00\x00\x00")

func cmdInMainGoBytes() ([]byte, error) {
	return bindataRead(
		_cmdInMainGo,
		"cmd/in/main.go",
	)
}

func cmdInMainGo() (*asset, error) {
	bytes, err := cmdInMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/in/main.go", size: 170, mode: os.FileMode(420), modTime: time.Unix(1545364446, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdOutMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x31\x0e\xc3\x20\x0c\x45\x77\x9f\xc2\x62\xa8\x60\x81\x73\x74\x6a\xd5\x1b\x10\x97\x24\xa8\x25\x8e\x00\x4f\x88\xbb\x57\x8a\x12\xea\xe9\xc9\x7a\xfa\x6f\xf7\xf4\xf1\x4b\xc0\xe4\xe3\x06\x10\xd3\xce\xb9\xa2\x06\x3c\x4f\xb5\x86\xf6\x7e\x7c\x9f\xbe\xae\xd8\xbb\xcb\xa1\xb0\x64\x0a\xea\x2f\x2d\xb1\xae\x32\x59\xe2\xe4\xe8\xcb\xf2\x9e\xb8\x14\xc7\x33\xb1\xe4\x12\x06\x28\x30\x00\xb3\x6c\x74\xc4\xb4\xc1\x36\x16\x2e\xc5\x3e\xa4\xea\xdb\x55\xb0\xaf\x13\x5a\x37\xd0\xe1\x17\x00\x00\xff\xff\x44\xcd\xfd\xef\xab\x00\x00\x00")

func cmdOutMainGoBytes() ([]byte, error) {
	return bindataRead(
		_cmdOutMainGo,
		"cmd/out/main.go",
	)
}

func cmdOutMainGo() (*asset, error) {
	bytes, err := cmdOutMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/out/main.go", size: 171, mode: os.FileMode(420), modTime: time.Unix(1545364439, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goMod = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcd\x4f\x29\xcd\x49\x55\xa8\xae\x56\xd0\xf3\xcc\x2d\xc8\x2f\x2a\x09\x48\x2c\xc9\x50\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xc8\x9d\xfe\x34\x19\x00\x00\x00")

func goModBytes() ([]byte, error) {
	return bindataRead(
		_goMod,
		"go.mod",
	)
}

func goMod() (*asset, error) {
	bytes, err := goModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go.mod", size: 25, mode: os.FileMode(420), modTime: time.Unix(1545193601, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pipelineYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xb1\x6e\xe3\x30\x10\x44\x7b\x7e\xc5\x00\xd7\x9e\x7c\xd5\x35\xaa\x93\x22\xad\x7f\x40\x5a\x4b\x2b\x6a\x63\x8a\x2b\x90\x4b\x05\x86\xe1\x7f\x0f\x64\xcb\x41\x10\x27\x40\x5a\xce\xe3\x3c\xec\x24\xce\x5a\x52\xc7\x8d\x9d\x66\xce\xb5\xab\x10\x69\xe2\x1a\xe7\x33\x76\xfb\x2d\xc3\xe5\xe2\x80\x15\xa8\xd1\x6b\x77\xe4\x54\xc9\x44\x9e\x1d\x70\x03\x6a\x07\x00\x89\x67\xcd\x62\x9a\x4e\xb7\xef\x4f\x57\x74\xcf\x5e\xb2\xa5\xd3\x5a\xe2\xee\xb6\x5f\x88\x1e\xdf\xbb\x91\xbb\x63\xc3\x0b\xaf\x82\xff\xd3\x17\xfb\x1f\x3c\xaf\x09\xee\x0a\x74\x89\xc9\xb8\x47\xc9\x12\x3d\x74\xe8\xb4\xa4\xcc\x78\x93\x10\x30\xd2\xc2\x68\x83\xfa\x26\xf0\xc2\xa1\xdd\x1a\x28\x83\x22\x68\x21\x09\x74\x08\x0c\x9d\x4d\x34\x42\x22\x6c\x64\xdc\x7b\x35\x0e\xe2\x4b\xa2\x35\xdb\xe1\x65\x40\x54\xdb\x0a\xbc\x2c\x1c\xff\x42\x0c\x3d\x0f\x54\x82\x65\x98\xa2\x95\x38\x68\xbb\xbb\x32\x1f\xce\x1a\x3d\x1f\x8a\x77\xee\x55\x0f\x9f\xe6\xe8\xb5\x92\xb5\x6d\x0e\x14\xd7\xc3\x2a\x78\xb6\xef\xd6\x00\x2c\x89\xf7\x9c\x6a\x58\x2a\x7c\x45\xe7\xf2\x03\x3a\x53\xa2\x29\xdf\x86\x02\x16\x4e\x59\x34\x36\x33\xd9\xf8\xc0\xff\xdb\x52\xf7\x1e\x00\x00\xff\xff\x80\x32\xbf\x14\x1a\x02\x00\x00")

func pipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_pipelineYml,
		"pipeline.yml",
	)
}

func pipelineYml() (*asset, error) {
	bytes, err := pipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pipeline.yml", size: 538, mode: os.FileMode(420), modTime: time.Unix(1545282186, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceResourceGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x51\x93\xdb\xc6\x0d\x7e\x16\x7f\x05\xa2\x99\x34\x52\xca\x52\x4d\x27\xd3\x87\xeb\xf8\xa1\xb1\x9b\xc9\xb5\x4d\xec\x89\xed\xf8\xc1\x93\xa9\x20\x12\x94\xd6\x5a\xee\x32\xbb\x4b\xc9\x1a\xcf\xfd\xf7\x0e\xb0\xbb\x24\x75\x67\xd7\xb1\xfb\x74\x27\x09\x04\xb0\xc0\x87\x0f\xdf\x72\xb3\x81\x67\x58\x1f\x71\x4f\xe0\xc8\xdb\xc1\xd5\x04\xca\x03\x1a\x50\x5d\xaf\xa9\x23\x13\x30\x28\x6b\xc0\xb6\x80\xf0\xd8\x9a\xda\x0e\xce\x4f\xc6\x55\xd1\xdf\x7b\xbc\x28\x54\xd7\x5b\x17\x60\x55\x2c\x96\x64\x6a\xdb\x28\xb3\xdf\xbc\xf1\xd6\x2c\x8b\xc5\xb2\xed\xc2\xb2\x58\xd8\x1a\x96\x7b\x15\x0e\xc3\xae\xaa\x6d\xb7\xa9\xb5\x1d\x9a\x9d\xf5\x7e\x63\xdb\xe8\x7f\xfc\x87\x9f\x51\x76\xa3\xec\x10\x94\xe6\x0f\x3e\xb8\xda\x9a\xd3\xb2\x58\x17\xc5\x66\x03\x2f\x0e\xca\x5f\x65\x6e\x8d\xbe\x00\x82\x3f\x92\xa6\x60\x0d\xb4\xd6\xc1\x9e\x42\x50\x66\x0f\x3e\xa0\x0b\xd4\x54\xf0\xea\x80\x01\x54\x80\xc6\x92\xbf\x29\x36\x1b\xf6\xf4\xbd\x75\xb0\x7d\x7c\xa0\xfa\xb8\x2d\xf9\x37\x65\x6a\x27\xe7\xf7\xa0\x82\x87\x13\x39\xcf\x75\x20\xac\x0f\x10\x54\x47\x62\xe3\xa1\x46\xad\xa9\x29\xa3\x6f\x0e\x72\x56\xe1\x00\xdb\x77\xcb\xda\x0e\x26\x2c\x6f\x60\xf9\xcd\xf2\x6e\x5b\xc1\x8b\x03\x71\x14\x43\x6f\xc3\xe8\xeb\x6c\x07\xdd\xc0\x8e\xae\xcc\xff\xb2\xbc\xdb\x96\x80\xa6\x01\x6f\xc1\x9a\x6a\x9e\xde\xad\x89\xb9\x9d\x9d\x0a\xe4\x01\xa1\x55\x9a\xa0\xb6\x26\xa0\x32\x1c\x3c\x1c\x08\x34\x06\xf2\x53\x90\x60\x25\x7f\x3b\x84\x7e\x08\xd0\x28\x47\x75\xb0\xee\x72\xe5\xf7\xe9\x10\xa2\x63\x6d\xed\xd1\x83\x32\xe2\x68\xb4\x85\xda\x11\x06\x6a\x60\x77\x91\x1c\xa4\xa8\x6c\x91\x63\x48\x1a\x9c\xb2\x23\x6c\x7c\xac\x5e\xb0\x80\xd0\x61\x5f\x72\x14\x47\x61\x70\x92\xa1\x0a\xb0\xc3\xfa\xc8\x69\x8d\x68\xca\xb9\xdc\x1a\xa8\xd1\x13\xbb\x76\x09\x86\x17\x3e\x5d\x3b\x48\x14\xdc\xd9\x21\xc0\xf9\xa0\xea\x43\xca\x4d\x59\xe3\x63\x46\x1c\x5c\x8e\x01\x8e\x5a\x72\x10\x6c\x09\x17\x3b\x80\x3f\x48\x8d\x47\x30\x73\x18\x79\x20\x58\x49\x16\x1c\x75\x36\x10\x63\xc6\x34\xb1\xae\xa0\x2d\x37\xf5\x52\x72\x28\x4d\xc9\x6d\x72\x24\xcf\x24\x83\xd9\x23\xd9\x4b\x25\xce\xe3\x89\x6b\x52\x27\x92\x51\xba\x5f\xfb\xd8\xdd\xe8\xb0\xd7\xc8\xc0\x0d\x82\xe2\x41\x87\x74\x78\x6c\x03\x39\x2e\x9b\x53\x74\x4a\x75\x6b\x9d\xed\xc0\xdb\x8e\x60\x35\xf8\x81\x33\x58\xc7\x48\x1c\x1b\xe2\x08\x94\x52\x2f\xb5\x1f\x1c\x35\x10\x0e\xce\x0e\xfb\x03\x6c\xe3\x6f\xdb\xdc\xd8\x5e\xf5\xa4\x95\xa1\xaf\x66\xa3\xd3\x50\xab\x8c\xe2\x8a\x56\x63\x21\xc7\x13\x70\x18\x65\xae\xcf\x90\x0b\xc8\x59\x95\xff\xf3\x44\xb9\xdf\x1c\xfa\x2a\xd9\xdc\x77\x19\xe2\x71\x62\xa7\x94\x2c\x79\x30\x36\x40\x43\xa8\xe3\x5c\xe1\xb5\x83\xbf\x71\x59\x3c\x37\xf7\x92\xa0\x37\xb6\xc4\xc7\x2e\x09\x34\x7d\x0e\xf4\x2f\xa2\x9e\x8b\xd0\x29\xd3\x94\x10\x38\xec\x48\x19\x06\xe8\x2d\x32\x4c\xbe\x80\xef\xe8\x8c\x8e\x84\xf2\xf4\x19\x2f\x7e\x06\x5f\x84\xc1\xa8\xdf\x86\x09\xfa\x4c\x09\x27\xe2\x19\x61\xea\xe0\x20\x7c\xcc\x33\x5e\xa2\xfb\xe4\x53\xce\x52\xc1\x6d\x2b\xa0\x3c\xe0\x89\xa0\x63\x70\xfb\xa1\x3e\x8c\x07\xf6\x10\x98\x97\x38\xb4\x38\x23\x2e\x2e\xfd\x36\x90\x09\x9c\x60\xed\xac\xf7\xf2\x18\x47\xc9\x3d\xf4\x91\x10\x94\xd6\xc0\xfd\x41\xd0\x36\x70\xe6\xda\x62\xc3\xc9\xc9\x20\x63\xc0\x1d\x7a\xee\xf7\xe3\x67\x2f\x2b\x21\xce\x9f\x47\xce\xcc\xa3\xe1\xc5\x36\x13\x6f\x35\x19\x98\x40\xae\x45\x6e\x57\xb8\xf4\x34\x3d\xe9\x83\x1b\xea\xf0\xee\x4e\xfc\x09\x73\x7e\xdc\x59\x34\xeb\x28\x1c\x6c\xc3\x58\x75\x8e\x7c\x6f\x4d\x23\xe4\x15\x21\xb2\xb1\x7d\xd8\xe4\x9a\x6c\xa4\x12\x50\xdb\xae\x43\xd3\x54\x23\x5a\x46\xe6\x85\xf3\x81\xcc\x6c\x31\x09\x68\x12\xf8\x62\x48\xf1\xe0\x4b\xb0\x2e\xda\x72\x8c\x6d\xab\x53\xc7\xfe\x94\xed\xb6\x39\x08\xfb\x76\x83\xa9\x8a\x76\x30\x35\xac\x1c\x7c\x9d\xb3\x5f\xc7\xf4\x57\xc9\xb1\xad\xab\xe7\x69\xe8\x46\x34\xd4\xd5\x2f\xf1\xdf\x12\xb4\xdd\xef\xc9\xc1\xd7\xb6\xae\xfe\x2d\xff\xae\x61\xf5\xfa\xd7\xb9\x05\x39\x67\xdd\x1a\xde\x15\x0b\x69\x08\x63\x8c\x1a\xd8\x26\x67\x7e\x24\x9d\x1d\x01\x6a\xcd\x5d\x9d\x91\xae\x07\xaf\x4c\x4d\xb1\xce\x86\x60\xaf\x4e\x64\xf2\x84\x67\x1f\x5b\x71\x8d\x6e\x3f\x70\x53\x04\x80\xe3\x4f\x7c\x4e\xa3\x34\xcf\x01\x99\x04\x71\x79\xb8\x55\xce\x07\xc0\x13\x2a\x8d\x3b\x3d\x06\xac\x98\x9f\x05\xb5\x4c\xd2\x3e\x12\x95\xf8\x17\xf4\xed\x28\x0e\x12\xe7\x32\xdb\x3d\xd1\x6f\x09\x0d\xf5\x14\xdb\x9c\x40\x29\x58\xb2\xed\xd4\xa7\x1d\x09\xcf\x65\x04\x51\x53\x89\x73\x5e\x50\x69\x8a\x4a\x40\xd8\xab\x30\x3d\x72\x4e\x9c\x2c\xa9\x23\x68\xe5\x05\xfb\xdc\x48\x86\xc0\x87\x0b\x24\x9e\xa7\x4a\xe4\x02\x31\xe5\x93\x23\x4c\x93\x18\xdd\x33\x03\x75\x78\x24\xf0\x64\x3c\xc9\xee\x9b\x26\x36\x6d\x23\x2b\x56\x32\xd7\x3c\x9f\xec\xfd\xa8\x4c\x23\x83\xa8\x0c\xa1\xcb\x25\x51\x66\x5f\x15\xc5\x42\xb6\x3d\xdc\x3c\x62\x75\x50\x2c\x54\x3b\x56\xec\x8b\x47\xdc\x13\x86\xc4\xc2\xea\xe6\x31\x9b\x95\x60\x8f\x6c\x9a\x4c\x5e\x27\xa9\xf0\x6b\xb1\xe0\x07\xbf\xb0\x47\xb1\x5e\xa4\x2a\x48\x47\xdb\x2e\x54\xff\x60\x70\xb5\xab\xed\x91\x2e\x90\x1e\x91\x24\x5b\x3b\x30\xc6\xcd\x18\xb2\xc3\x7e\xbb\x2e\x16\x8b\x3b\x76\x28\xa0\xe4\x68\x49\x67\x55\x7f\x0f\x56\xad\x72\x2a\xeb\x18\x93\x4d\x66\x89\x5e\x85\x26\xe7\x92\xaf\x78\xc6\xc9\xd3\x6d\xb0\xb8\x52\xf0\x47\xf8\x66\x5d\x2c\xee\x0a\x29\xd2\xed\x6c\x74\xb9\xbb\x39\xa7\x28\x41\xd1\xed\x54\x70\xe8\x2e\xe0\x49\x1a\xeb\x83\x63\x8c\x1c\xe9\x12\x99\x3e\x7d\x3e\xa1\x1e\x98\xe4\x17\x99\x1d\x7a\xd6\x62\xf5\xa0\xa7\xba\xf3\x5a\xf4\xca\xb3\x10\x6a\xe1\xcd\xc0\x38\x31\xc4\x8e\xc4\x8f\x38\xa8\x8a\x85\xa1\x73\x1a\x4e\x2e\xc1\x34\xaa\x93\x3c\x93\xbf\x9c\xfc\x38\x85\x37\x8f\x60\x3e\xd5\xef\x26\x1f\x6c\x96\x4a\x93\xad\x4b\x2e\x52\x11\x19\xf3\xd6\x7c\x9c\x2e\x79\xe2\x7e\x3f\x57\x2a\xf3\x51\xa2\x9c\x6b\xf8\x37\x76\x17\xe9\x72\xbb\xa7\xb0\xcd\x73\x39\x29\xfb\xf7\xf0\xdf\xad\x59\x45\x31\xf3\x64\xd4\x01\xb1\x07\x25\x3c\x24\xc5\x1e\x1d\x76\x9e\xbf\x79\x26\xff\xbd\x97\x26\x8b\xc5\xfb\x78\x72\xce\x92\xb6\xae\x7e\xa4\x80\xbc\xc4\xee\x51\xe6\x13\xea\x6c\xdc\x75\xfb\x3d\x0f\xd6\xb8\x9a\x7c\x66\x4e\xc3\xbb\x19\x06\x1e\xdb\x2e\x54\xcf\x9c\x32\xa1\xe5\x45\x80\xe6\x12\x0e\x51\x30\x63\x96\xd3\xe2\x32\x58\x56\xf2\xa6\x41\xd7\x24\xd9\x56\x02\xfa\x71\xc5\x72\x13\x86\x5e\x44\x1a\xfc\xf3\xf9\xd3\x9f\xb2\xb4\xa3\xb7\x3d\xd5\x49\x21\xcf\x64\x6d\x3a\x5b\x9e\xc5\x65\xee\x08\x8b\x0d\xfe\x6a\xb9\x1e\x4d\x5e\xa1\x33\x73\x0b\x38\xa3\x28\x8e\x99\xc9\xad\x69\xed\xb5\x13\x65\x5a\xeb\x3a\xb9\xa0\xa1\x86\x8e\xbc\xc7\x3d\xcd\x9e\x78\x42\xbb\x61\x7f\xe5\xb5\xe1\x6f\x66\x96\x72\xe8\x57\xa2\x61\xaf\xf6\xc6\x48\x89\x20\x3a\x5e\x04\x7e\xda\x2d\xf7\xd5\x6c\x29\x3e\x7c\x04\x64\x94\x8e\x8c\x1c\xb9\x35\xd6\x68\xa2\x4a\x54\xa1\x2a\x16\xf1\xc9\x67\x18\x0e\x3c\x35\xdc\x91\xe7\xbd\xb4\x64\xb5\xfc\xd2\x6f\x52\xe8\x65\x09\xf7\x20\xb6\x2e\x16\xbb\x4b\x60\xa5\x93\xb8\x89\x2f\x93\xd5\x8f\xe8\xfc\x01\xf5\x2a\x3d\xb6\x2e\xde\xc3\x4c\x73\x62\x9a\xd8\xe9\xee\x41\x7d\x12\xd6\x6e\xe0\x4b\xbf\x2c\x13\xa2\x57\x12\x73\xcd\x25\x62\xaf\x8f\x20\xde\x41\x2b\x29\xd6\xf7\x4a\xd3\x6a\x3a\x4e\x09\x29\xc1\x3f\xff\xf5\xdb\x6f\x3f\x29\x13\xa9\x5d\x86\xf7\x15\x49\x4d\xe4\x67\xb0\xa3\x8d\x50\x14\xf4\xa8\x9c\x97\x15\xd4\x28\xdf\x6b\xbc\xe4\xa6\x4c\x53\xfd\xf2\x36\x36\x84\x79\xad\xc3\x0b\xef\x65\x97\xa5\x05\x75\x7d\xb8\x80\x6a\x65\x11\x18\xa2\x46\x96\x6c\x97\xc3\x47\xce\xcb\xd9\x70\xda\x42\xef\x3f\x61\x47\x37\x00\x4b\x5c\x96\xfc\xf1\x17\xce\xe4\x06\x96\x3b\xf9\x78\x57\xde\x37\xab\xaf\xcd\x9a\xd1\x2c\x9d\xf6\x07\x72\x54\x5e\xcb\x90\x1e\xbd\x9f\xdd\x57\xe4\xa2\xc3\xa7\x9a\x09\x17\x03\x9d\xf5\x21\x4a\x0f\x91\xbc\xbc\x92\x7d\xdc\xc9\x79\x72\xd3\x75\x29\x42\x59\xcc\xf9\x0e\x63\xc6\xbb\x70\x09\xaa\xa2\x6a\x14\x04\xf7\xb5\xd2\x4c\x06\xa0\x69\xa2\xd3\x99\x34\xca\x37\xd7\xc1\xd4\x07\x34\x7b\x6a\x2a\xf8\xc1\x9e\x99\x60\xca\xf4\x2e\x00\xb5\xb6\x67\x3e\x47\x96\x3d\xf1\xb6\x66\x59\x29\xe5\x1c\xc4\x2d\x4b\x1a\x16\x23\xcc\x03\xd2\x92\x31\xc1\x07\x32\xe9\xfa\x35\x4c\x75\x7f\xa3\x94\xd0\x8d\xdc\x38\xad\x96\xa7\x43\xf8\xf8\x6e\x61\xa3\x4f\x58\x2e\x7c\xf7\xfe\xac\xed\x82\xb0\xed\x87\xdf\xb9\x5f\x9e\x0e\x61\x25\x17\xcd\xcf\xda\x2f\xff\xcf\x2e\x79\xf1\x90\xbc\xc6\xfb\x67\xba\x09\xf3\x49\x1e\x60\x85\xa1\xe9\x03\x61\x53\xc2\x79\xa6\x86\x85\xf4\xae\x5e\x91\x64\x4c\xc7\x57\x36\xd3\x0b\x15\x81\xa0\xbc\x54\x49\x71\x79\xe1\xf8\xa1\x53\x66\x9f\x21\x38\x5e\xf6\xc6\x82\xc6\x85\xdd\xc6\x3b\xe6\x58\x51\x39\x44\xcf\xf4\x9a\x3a\x38\x7f\x3f\x23\xce\x3a\x56\x3e\x3b\xca\x03\x97\x27\x40\xfa\x23\xe5\xa4\x40\x8e\x95\x54\x7a\x32\x92\x5b\xd4\x9f\xb1\xdc\xaf\x97\xe9\xa7\xff\x70\x20\x56\xa1\x33\x11\xfa\x80\xe5\xe6\x42\xb4\x53\xde\x33\xba\xae\x1d\x4c\x61\xb7\x93\x2c\x94\x66\x5c\xe3\x60\xb6\x91\xe2\x22\x9b\x5e\x4e\x4d\xaf\xbf\xfc\xb0\xcb\xdf\x2b\x12\x9e\x8c\x54\x28\x0d\xc9\xd2\x20\xb3\x44\x93\x5e\xd5\x49\x2d\x15\x83\xf7\x8d\xdd\xc9\xb6\x3f\x93\xd6\xfc\x77\x76\xe9\x7a\x63\x77\x5f\x25\x85\x80\xfe\x98\x36\x14\x17\xaa\xff\xc0\x36\x93\x4d\x72\x7d\x84\x51\xff\x70\x55\x1f\x2c\xb5\xb4\x5e\x7e\x26\x6c\x64\xbb\xf4\xd1\xe8\x53\x56\xc9\x69\xa6\x77\x27\xd4\xe7\xfd\x25\x5b\xf3\xa5\xe9\xd2\xde\x4c\xd1\xff\xf0\x39\xfb\x53\x0a\xf1\x9d\xe5\xea\x4d\x03\x61\x1a\xd8\x66\x32\xda\xe6\xd5\x23\xf4\x26\xf4\x2d\x50\x65\xfa\xe6\x41\x91\x97\x1c\xe3\x5b\x95\x7b\xb7\xb1\xa9\x41\x1f\x1c\x9a\xf8\x26\x34\xbd\x9f\x9b\x82\x2a\x9f\x02\x7e\x78\xa9\xdd\x7d\x9c\x41\xff\x1b\x00\x00\xff\xff\x9e\x73\xbf\x59\x14\x17\x00\x00")

func resourceResourceGoBytes() ([]byte, error) {
	return bindataRead(
		_resourceResourceGo,
		"resource/resource.go",
	)
}

func resourceResourceGo() (*asset, error) {
	bytes, err := resourceResourceGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/resource.go", size: 5908, mode: os.FileMode(420), modTime: time.Unix(1545364981, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Dockerfile": dockerfile,
	"Makefile": makefile,
	"cmd/check/main.go": cmdCheckMainGo,
	"cmd/in/main.go": cmdInMainGo,
	"cmd/out/main.go": cmdOutMainGo,
	"go.mod": goMod,
	"pipeline.yml": pipelineYml,
	"resource/resource.go": resourceResourceGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Dockerfile": &bintree{dockerfile, map[string]*bintree{}},
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"cmd": &bintree{nil, map[string]*bintree{
		"check": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{cmdCheckMainGo, map[string]*bintree{}},
		}},
		"in": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{cmdInMainGo, map[string]*bintree{}},
		}},
		"out": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{cmdOutMainGo, map[string]*bintree{}},
		}},
	}},
	"go.mod": &bintree{goMod, map[string]*bintree{}},
	"pipeline.yml": &bintree{pipelineYml, map[string]*bintree{}},
	"resource": &bintree{nil, map[string]*bintree{
		"resource.go": &bintree{resourceResourceGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

