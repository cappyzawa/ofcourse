// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/Dockerfile
// templates/Makefile
// templates/cmd/check/main.go
// templates/cmd/in/main.go
// templates/cmd/out/main.go
// templates/go.mod
// templates/pipeline.yml
// templates/resource/resource.go
package ofcourse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x3d\x4b\xc5\x30\x14\xc6\xf1\xfd\x7c\x8a\x67\xea\x20\x24\x87\x82\x93\xe0\x20\x8a\x2f\x88\xa6\x04\x45\x04\x97\xbe\xc4\x10\x4c\x73\x4a\x92\xfa\xf9\xef\xd0\xde\xa1\xdc\xf1\xf0\xe7\x3c\xfc\x1e\xad\x79\x83\x97\xd8\x27\x7f\xd3\xea\xb6\xd5\xd7\xe8\x0b\x86\x35\xc4\xc9\x65\xa2\x7b\xd3\x7d\x43\x83\x47\x99\x1c\xd1\x97\xb1\xaf\x0f\x2f\xf6\x7c\xda\xcf\x77\xac\xa9\xb8\x8a\x27\xd3\xdd\x7d\x3c\xa3\x69\xf0\x43\x00\xe0\x05\xd5\x95\x0a\xf5\x0f\xcd\x5a\xeb\x43\x09\xa9\xd4\x3e\xc6\xad\x10\x5d\x0a\xb6\xe5\xf9\x6f\x0a\x19\x6a\x01\xcb\x52\x39\xbb\x22\x6b\x1e\xdd\x4e\x52\xea\x37\xcb\x7c\xbb\x3b\xc1\x59\xa4\xb2\x17\x1e\x42\xe2\xab\xe3\x07\xd3\x29\x00\x00\xff\xff\x43\x64\x48\x57\xe4\x00\x00\x00")

func dockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerfile,
		"Dockerfile",
	)
}

func dockerfile() (*asset, error) {
	bytes, err := dockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dockerfile", size: 228, mode: os.FileMode(420), modTime: time.Unix(1545362408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcc\xc1\x4a\x03\x31\x10\xc6\xf1\x73\xe6\x29\x3e\x4a\xa0\xad\x90\xf1\xbe\xc5\x9b\x1e\xbc\x28\x54\xf0\x24\x48\x75\x66\x62\x70\x37\x81\x24\x5a\xa4\xf6\xdd\x65\xb5\x5e\x3c\x79\xfb\xf8\x31\xff\x49\x26\x6a\xb8\xbf\xda\xde\x5d\xdf\xde\x90\x94\xe7\x57\xad\x8f\x55\x63\x6a\xbd\x7e\xe0\x02\x87\x03\xf8\xf2\x5b\xb7\xbf\x78\x3c\x0e\x7e\x75\x2a\xd6\xa4\x63\xd3\xff\x76\xa4\x59\x92\xd1\xe9\x7c\x20\xf7\x33\xf0\xf4\x96\x46\x41\xe8\xf0\xab\x3f\x9f\xd6\x60\xa2\xae\xad\x0f\xe4\x62\xc1\xbc\x10\xde\xc1\xe7\xcc\x4c\x64\xd3\xec\x96\xb2\x80\x11\xf2\x6e\x52\x2c\xcf\x38\x96\x25\x3e\xb1\x7f\x49\xa3\xa2\xea\x4e\x10\x2a\x6c\x03\x29\x78\x20\xe7\x62\xb1\xa9\x23\xec\x11\x1a\x16\xde\xdb\x62\x33\xb3\x94\xac\xf4\x15\x00\x00\xff\xff\xbb\xb8\xb8\x4f\x0c\x01\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 268, mode: os.FileMode(420), modTime: time.Unix(1545362791, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdCheckMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcd\x3d\x0a\x03\x21\x14\x04\xe0\xda\x77\x0a\xb1\x08\xda\xe8\x21\x52\xa5\x0b\xb9\x81\xfb\xe2\xaa\x18\xf7\x89\x3f\x95\x78\xf7\xc0\x92\x4d\x37\x1f\x03\x33\xc5\x62\xb2\xde\xf1\x6c\xe3\x01\x10\x73\xa1\xda\xb9\x04\x26\xe6\xe4\xfa\x71\xf2\x69\x7b\xe0\x6b\x99\xea\x1a\x8d\x8a\x4e\x00\x13\x3e\xf6\x30\x36\x8d\x94\x0d\x7e\x68\xbc\x37\x6a\xcd\xd0\x8e\x34\x6a\x73\xa6\x24\xff\x87\x00\x05\xb0\x8f\x03\xcf\x0b\xa9\xf8\x04\x76\x75\xfa\x1e\x1c\x26\x79\xbb\x96\xf5\xeb\x17\xe6\x52\xb0\xe0\x1b\x00\x00\xff\xff\x79\x69\xf6\x8a\x9c\x00\x00\x00")

func cmdCheckMainGoBytes() ([]byte, error) {
	return bindataRead(
		_cmdCheckMainGo,
		"cmd/check/main.go",
	)
}

func cmdCheckMainGo() (*asset, error) {
	bytes, err := cmdCheckMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/check/main.go", size: 156, mode: os.FileMode(420), modTime: time.Unix(1545193426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdInMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x3d\xae\xc4\x20\x0c\x84\x7b\x9f\xc2\xa2\x78\x82\x06\xce\x91\xee\x69\x6f\x40\xbc\x84\xa0\x2c\x18\xf1\x53\x21\xee\xbe\x52\x94\x64\x5d\x79\x46\x9f\xe6\xcb\x96\x0e\xeb\x1d\x46\x1b\x12\x40\x88\x99\x4b\x43\x09\x78\x9d\x18\x03\xf5\x72\xb6\xff\xb6\xed\x38\xa7\x29\xae\x72\x2f\xe4\xc4\x0f\xf2\xa1\xed\x7d\xd5\xc4\xd1\xd0\x87\xfb\x7b\xe5\x5a\x0d\x6f\xc4\xbd\x54\x67\xf2\xe1\x9f\x20\x40\x01\x6c\x3d\xd1\x29\x94\x0a\xc7\xb3\x72\x23\x7a\x49\xf2\xef\x96\xe8\xd7\xf5\x8c\xa9\x60\xc2\x37\x00\x00\xff\xff\x3b\x9a\xec\xfb\xae\x00\x00\x00")

func cmdInMainGoBytes() ([]byte, error) {
	return bindataRead(
		_cmdInMainGo,
		"cmd/in/main.go",
	)
}

func cmdInMainGo() (*asset, error) {
	bytes, err := cmdInMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/in/main.go", size: 174, mode: os.FileMode(420), modTime: time.Unix(1545193436, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdOutMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x41\xae\xc3\x20\x0c\x44\xf7\x3e\x85\x95\xc5\x17\x6c\xe0\x1c\x7f\xd5\xaa\x37\x20\x2e\x21\x28\x25\x46\x80\x57\x88\xbb\x57\x8a\x92\xd4\x2b\xcf\xe8\x69\x5e\x76\xb4\xb9\xe0\x31\xb9\xb8\x03\xc4\x94\xb9\x34\x54\x80\xe7\x4d\xbd\xa3\xf9\x3f\xda\xa7\x6b\x2b\x8e\x61\x8b\xaf\x2c\x85\xfc\xf4\x83\x42\x6c\xab\xcc\x86\x38\x59\xfa\xb0\xbc\x67\xae\xd5\xf2\x42\x2c\xa5\x7a\x9b\xb7\x70\x87\x09\x34\xc0\x22\x3b\x1d\x42\xa5\xb1\xdf\x2b\x17\x62\x1e\xd2\xd4\xdf\x65\x31\xaf\xf3\xe9\x43\xc3\x80\x6f\x00\x00\x00\xff\xff\x10\x4f\x7d\x1c\xaf\x00\x00\x00")

func cmdOutMainGoBytes() ([]byte, error) {
	return bindataRead(
		_cmdOutMainGo,
		"cmd/out/main.go",
	)
}

func cmdOutMainGo() (*asset, error) {
	bytes, err := cmdOutMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/out/main.go", size: 175, mode: os.FileMode(420), modTime: time.Unix(1545193442, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goMod = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcd\x4f\x29\xcd\x49\x55\xa8\xae\x56\xd0\xf3\xcc\x2d\xc8\x2f\x2a\x09\x48\x2c\xc9\x50\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xc8\x9d\xfe\x34\x19\x00\x00\x00")

func goModBytes() ([]byte, error) {
	return bindataRead(
		_goMod,
		"go.mod",
	)
}

func goMod() (*asset, error) {
	bytes, err := goModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go.mod", size: 25, mode: os.FileMode(420), modTime: time.Unix(1545193601, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pipelineYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xb1\x6e\xe3\x30\x10\x44\x7b\x7e\xc5\x00\xd7\x9e\x7c\xd5\x35\xaa\x93\x22\xad\x7f\x40\x5a\x4b\x2b\x6a\x63\x8a\x2b\x90\x4b\x05\x86\xe1\x7f\x0f\x64\xcb\x41\x10\x27\x40\x5a\xce\xe3\x3c\xec\x24\xce\x5a\x52\xc7\x8d\x9d\x66\xce\xb5\xab\x10\x69\xe2\x1a\xe7\x33\x76\xfb\x2d\xc3\xe5\xe2\x80\x15\xa8\xd1\x6b\x77\xe4\x54\xc9\x44\x9e\x1d\x70\x03\x6a\x07\x00\x89\x67\xcd\x62\x9a\x4e\xb7\xef\x4f\x57\x74\xcf\x5e\xb2\xa5\xd3\x5a\xe2\xee\xb6\x5f\x88\x1e\xdf\xbb\x91\xbb\x63\xc3\x0b\xaf\x82\xff\xd3\x17\xfb\x1f\x3c\xaf\x09\xee\x0a\x74\x89\xc9\xb8\x47\xc9\x12\x3d\x74\xe8\xb4\xa4\xcc\x78\x93\x10\x30\xd2\xc2\x68\x83\xfa\x26\xf0\xc2\xa1\xdd\x1a\x28\x83\x22\x68\x21\x09\x74\x08\x0c\x9d\x4d\x34\x42\x22\x6c\x64\xdc\x7b\x35\x0e\xe2\x4b\xa2\x35\xdb\xe1\x65\x40\x54\xdb\x0a\xbc\x2c\x1c\xff\x42\x0c\x3d\x0f\x54\x82\x65\x98\xa2\x95\x38\x68\xbb\xbb\x32\x1f\xce\x1a\x3d\x1f\x8a\x77\xee\x55\x0f\x9f\xe6\xe8\xb5\x92\xb5\x6d\x0e\x14\xd7\xc3\x2a\x78\xb6\xef\xd6\x00\x2c\x89\xf7\x9c\x6a\x58\x2a\x7c\x45\xe7\xf2\x03\x3a\x53\xa2\x29\xdf\x86\x02\x16\x4e\x59\x34\x36\x33\xd9\xf8\xc0\xff\xdb\x52\xf7\x1e\x00\x00\xff\xff\x80\x32\xbf\x14\x1a\x02\x00\x00")

func pipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_pipelineYml,
		"pipeline.yml",
	)
}

func pipelineYml() (*asset, error) {
	bytes, err := pipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pipeline.yml", size: 538, mode: os.FileMode(420), modTime: time.Unix(1545282186, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceResourceGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x51\x93\xdb\xc6\x0d\x7e\x16\x7f\x05\xa2\x99\x34\x52\xca\x52\x4d\x27\xd3\x87\xeb\xf8\xa1\xb1\x9b\xc9\xb5\x4d\xec\x89\xed\xf8\xc1\x93\xa9\x20\x12\x94\xd6\x5a\xee\x32\xbb\x4b\xc9\x1a\xcf\xfd\xf7\x0e\xb0\xbb\x24\x75\x67\xd7\xb1\xfb\x74\x27\x09\x04\xb0\xc0\x87\x0f\xdf\x72\xb3\x81\x67\x58\x1f\x71\x4f\xe0\xc8\xdb\xc1\xd5\x04\xca\x03\x1a\x50\x5d\xaf\xa9\x23\x13\x30\x28\x6b\xc0\xb6\x80\xf0\xd8\x9a\xda\x0e\xce\x4f\xc6\x55\xd1\xdf\x7b\xbc\x28\x54\xd7\x5b\x17\x60\x55\x2c\x96\x64\x6a\xdb\x28\xb3\xdf\xbc\xf1\xd6\x2c\x8b\xc5\xb2\xed\xc2\xb2\x58\xd8\x1a\x96\x7b\x15\x0e\xc3\xae\xaa\x6d\xb7\xa9\xb5\x1d\x9a\x9d\xf5\x7e\x63\xdb\xe8\x7f\xfc\x87\x9f\x51\x76\xa3\xec\x10\x94\xe6\x0f\x3e\xb8\xda\x9a\xd3\xb2\x58\x17\xc5\x66\x03\x2f\x0e\xca\x5f\x65\x6e\x8d\xbe\x00\x82\x3f\x92\xa6\x60\x0d\xb4\xd6\xc1\x9e\x42\x50\x66\x0f\x3e\xa0\x0b\xd4\x54\xf0\xea\x80\x01\x54\x80\xc6\x92\xbf\x29\x36\x1b\xf6\xf4\xbd\x75\xb0\x7d\x7c\xa0\xfa\xb8\x2d\xf9\x37\x65\x6a\x27\xe7\xf7\xa0\x82\x87\x13\x39\xcf\x75\x20\xac\x0f\x10\x54\x47\x62\xe3\xa1\x46\xad\xa9\x29\xa3\x6f\x0e\x72\x56\xe1\x00\xdb\x77\xcb\xda\x0e\x26\x2c\x6f\x60\xf9\xcd\xf2\x6e\x5b\xc1\x8b\x03\x71\x14\x43\x6f\xc3\xe8\xeb\x6c\x07\xdd\xc0\x8e\xae\xcc\xff\xb2\xbc\xdb\x96\x80\xa6\x01\x6f\xc1\x9a\x6a\x9e\xde\xad\x89\xb9\x9d\x9d\x0a\xe4\x01\xa1\x55\x9a\xa0\xb6\x26\xa0\x32\x1c\x3c\x1c\x08\x34\x06\xf2\x53\x90\x60\x25\x7f\x3b\x84\x7e\x08\xd0\x28\x47\x75\xb0\xee\x72\xe5\xf7\xe9\x10\xa2\x63\x6d\xed\xd1\x83\x32\xe2\x68\xb4\x85\xda\x11\x06\x6a\x60\x77\x91\x1c\xa4\xa8\x6c\x91\x63\x48\x1a\x9c\xb2\x23\x6c\x7c\xac\x5e\xb0\x80\xd0\x61\x5f\x72\x14\x47\x61\x70\x92\xa1\x0a\xb0\xc3\xfa\xc8\x69\x8d\x68\xca\xb9\xdc\x1a\xa8\xd1\x13\xbb\x76\x09\x86\x17\x3e\x5d\x3b\x48\x14\xdc\xd9\x21\xc0\xf9\xa0\xea\x43\xca\x4d\x59\xe3\x63\x46\x1c\x5c\x8e\x01\x8e\x5a\x72\x10\x6c\x09\x17\x3b\x80\x3f\x48\x8d\x47\x30\x73\x18\x79\x20\x58\x49\x16\x1c\x75\x36\x10\x63\xc6\x34\xb1\xae\xa0\x2d\x37\xf5\x52\x72\x28\x4d\xc9\x6d\x72\x24\xcf\x24\x83\xd9\x23\xd9\x4b\x25\xce\xe3\x89\x6b\x52\x27\x92\x51\xba\x5f\xfb\xd8\xdd\xe8\xb0\xd7\xc8\xc0\x0d\x82\xe2\x41\x87\x74\x78\x6c\x03\x39\x2e\x9b\x53\x74\x4a\x75\x6b\x9d\xed\xc0\xdb\x8e\x60\x35\xf8\x81\x33\x58\xc7\x48\x1c\x1b\xe2\x08\x94\x52\x2f\xb5\x1f\x1c\x35\x10\x0e\xce\x0e\xfb\x03\x6c\xe3\x6f\xdb\xdc\xd8\x5e\xf5\xa4\x95\xa1\xaf\x66\xa3\xd3\x50\xab\x8c\xe2\x8a\x56\x63\x21\xc7\x13\x70\x18\x65\xae\xcf\x90\x0b\xc8\x59\x95\xff\xf3\x44\xb9\xdf\x1c\xfa\x2a\xd9\xdc\x77\x19\xe2\x71\x62\xa7\x94\x2c\x79\x30\x36\x40\x43\xa8\xe3\x5c\xe1\xb5\x83\xbf\x71\x59\x3c\x37\xf7\x92\xa0\x37\xb6\xc4\xc7\x2e\x09\x34\x7d\x0e\xf4\x2f\xa2\x9e\x8b\xd0\x29\xd3\x94\x10\x38\xec\x48\x19\x06\xe8\x2d\x32\x4c\xbe\x80\xef\xe8\x8c\x8e\x84\xf2\xf4\x19\x2f\x7e\x06\x5f\x84\xc1\xa8\xdf\x86\x09\xfa\x4c\x09\x27\xe2\x19\x61\xea\xe0\x20\x7c\xcc\x33\x5e\xa2\xfb\xe4\x53\xce\x52\xc1\x6d\x2b\xa0\x3c\xe0\x89\xa0\x63\x70\xfb\xa1\x3e\x8c\x07\xf6\x10\x98\x97\x38\xb4\x38\x23\x2e\x2e\xfd\x36\x90\x09\x9c\x60\xed\xac\xf7\xf2\x18\x47\xc9\x3d\xf4\x91\x10\x94\xd6\xc0\xfd\x41\xd0\x36\x70\xe6\xda\x62\xc3\xc9\xc9\x20\x63\xc0\x1d\x7a\xee\xf7\xe3\x67\x2f\x2b\x21\xce\x9f\x47\xce\xcc\xa3\xe1\xc5\x36\x13\x6f\x35\x19\x98\x40\xae\x45\x6e\x57\xb8\xf4\x34\x3d\xe9\x83\x1b\xea\xf0\xee\x4e\xfc\x09\x73\x7e\xdc\x59\x34\xeb\x28\x1c\x6c\xc3\x58\x75\x8e\x7c\x6f\x4d\x23\xe4\x15\x21\xb2\xb1\x7d\xd8\xe4\x9a\x6c\xa4\x12\x50\xdb\xae\x43\xd3\x54\x23\x5a\x46\xe6\x85\xf3\x81\xcc\x6c\x31\x09\x68\x12\xf8\x62\x48\xf1\xe0\x4b\xb0\x2e\xda\x72\x8c\x6d\xab\x53\xc7\xfe\x94\xed\xb6\x39\x08\xfb\x76\x83\xa9\x8a\x76\x30\x35\xac\x1c\x7c\x9d\xb3\x5f\xc7\xf4\x57\xc9\xb1\xad\xab\xe7\x69\xe8\x46\x34\xd4\xd5\x2f\xf1\xdf\x12\xb4\xdd\xef\xc9\xc1\xd7\xb6\xae\xfe\x2d\xff\xae\x61\xf5\xfa\xd7\xb9\x05\x39\x67\xdd\x1a\xde\x15\x0b\x69\x08\x63\x8c\x1a\xd8\x26\x67\x7e\x24\x9d\x1d\x01\x6a\xcd\x5d\x9d\x91\xae\x07\xaf\x4c\x4d\xb1\xce\x86\x60\xaf\x4e\x64\xf2\x84\x67\x1f\x5b\x71\x8d\x6e\x3f\x70\x53\x04\x80\xe3\x4f\x7c\x4e\xa3\x34\xcf\x01\x99\x04\x71\x79\xb8\x55\xce\x07\xc0\x13\x2a\x8d\x3b\x3d\x06\xac\x98\x9f\x05\xb5\x4c\xd2\x3e\x12\x95\xf8\x17\xf4\xed\x28\x0e\x12\xe7\x32\xdb\x3d\xd1\x6f\x09\x0d\xf5\x14\xdb\x9c\x40\x29\x58\xb2\xed\xd4\xa7\x1d\x09\xcf\x65\x04\x51\x53\x89\x73\x5e\x50\x69\x8a\x4a\x40\xd8\xab\x30\x3d\x72\x4e\x9c\x2c\xa9\x23\x68\xe5\x05\xfb\xdc\x48\x86\xc0\x87\x0b\x24\x9e\xa7\x4a\xe4\x02\x31\xe5\x93\x23\x4c\x93\x18\xdd\x33\x03\x75\x78\x24\xf0\x64\x3c\xc9\xee\x9b\x26\x36\x6d\x23\x2b\x56\x32\xd7\x3c\x9f\xec\xfd\xa8\x4c\x23\x83\xa8\x0c\xa1\xcb\x25\x51\x66\x5f\x15\xc5\x42\xb6\x3d\xdc\x3c\x62\x75\x50\x2c\x54\x3b\x56\xec\x8b\x47\xdc\x13\x86\xc4\xc2\xea\xe6\x31\x9b\x95\x60\x8f\x6c\x9a\x4c\x5e\x27\xa9\xf0\x6b\xb1\xe0\x07\xbf\xb0\x47\xb1\x5e\xa4\x2a\x48\x47\xdb\x2e\x54\xff\x60\x70\xb5\xab\xed\x91\x2e\x90\x1e\x91\x24\x5b\x3b\x30\xc6\xcd\x18\xb2\xc3\x7e\xbb\x2e\x16\x8b\x3b\x76\x28\xa0\xe4\x68\x49\x67\x55\x7f\x0f\x56\xad\x72\x2a\xeb\x18\x93\x4d\x66\x89\x5e\x85\x26\xe7\x92\xaf\x78\x46\xf6\x24\x8e\x6e\x83\xc5\x95\x82\x3f\xc2\x37\xeb\x62\x71\x57\x48\x8d\x6e\x67\x93\xcb\xcd\xcd\x29\x45\x05\x8a\x6e\xa7\x82\x43\x77\x01\x4f\xd2\x57\x1f\x1c\x43\xe4\x48\x97\x48\xf4\xe9\xf3\x09\xf5\xc0\x1c\xbf\xc8\xe4\xd0\xb3\x14\xab\x07\x3d\x95\x9d\xb7\xa2\x57\x9e\x75\x50\x0b\x6f\x06\x86\x89\x21\x76\x24\x7e\xc4\x41\x55\x2c\x0c\x9d\xd3\x6c\x72\x05\xa6\x49\x9d\xd4\x99\xfc\xe5\xe4\xc7\x21\xbc\x79\x04\xf3\xa1\x7e\x37\xf9\x60\xb3\x54\x99\x6c\x5d\x72\x8d\x8a\x48\x98\xb7\xe6\xe3\x6c\xc9\x03\xf7\xfb\xa9\x52\x99\x8f\xf2\xe4\x5c\xc2\xbf\xb1\xbb\xc8\x96\xdb\x3d\x85\x6d\x1e\xcb\x49\xd8\xbf\x87\xfe\x6e\xcd\x2a\x6a\x99\x27\xa3\x0c\x88\x3d\x28\xe1\x21\x27\xf6\xe8\xb0\xf3\xfc\xcd\x33\xf9\xef\xbd\x2c\x59\x2c\xde\x47\x93\x73\x92\xb4\x75\xf5\x23\x05\xe4\x1d\x76\x8f\x31\x9f\x50\x67\xe3\xaa\xdb\xef\x79\xae\xc6\xcd\xe4\x33\x71\x1a\x5e\xcd\x30\xf0\xd4\x76\xa1\x7a\xe6\x94\x09\x2d\xef\x01\x34\x97\x70\x88\x7a\x19\xb3\x9a\x16\x97\xc1\xb2\x90\x37\x0d\xba\x26\xa9\xb6\x12\xd0\x8f\x1b\x96\x9b\x30\xf4\xa2\xd1\xe0\x9f\xcf\x9f\xfe\x94\x95\x1d\xbd\xed\xa9\x4e\x02\x79\xa6\x6a\xd3\xd9\xf2\x28\x2e\x73\x47\x58\x6b\xf0\x57\xcb\xf5\x68\xf2\x0a\x9d\x99\x5b\xc0\x19\x45\x70\xcc\x4c\x6e\x4d\x6b\xaf\x9d\x28\xd3\x5a\xd7\xc9\xfd\x0c\x35\x74\xe4\x3d\xee\x69\xf6\xc4\x13\xda\x0d\xfb\x2b\xaf\x0d\x7f\x33\xb3\x94\x43\xbf\x12\x09\x7b\xb5\x36\x46\x46\x04\x91\xf1\xa2\xef\xd3\x6a\xb9\x2f\x66\x4b\xf1\xe1\x23\x20\xa3\x72\x64\xe4\xc8\xa5\xb1\x46\x13\x45\xa2\x0a\x55\xb1\x88\x4f\x3e\xc3\x70\xe0\xa9\xe1\x8e\x3c\xef\xa5\x25\xab\xe5\x97\x7e\x93\x42\x2f\x4b\xb8\x07\xb1\x75\xb1\xd8\x5d\x02\x0b\x9d\x44\x4d\x7c\x97\xac\x7e\x44\xe7\x0f\xa8\x57\xe9\xb1\x75\xf1\x1e\x62\x9a\xf3\xd2\x44\x4e\x77\x0f\xea\x93\xb0\x76\x03\x5f\xfa\x65\x99\x10\xbd\x92\x98\x6b\x2e\x11\x7b\x7d\x04\xf1\x0a\x5a\x49\xb1\xbe\x57\x9a\x56\xd3\x71\x4a\x48\x09\xfe\xf9\xaf\xdf\x7e\xfb\x49\x99\x48\xed\x32\xbc\xaf\x48\x6a\x22\x3f\x83\x1d\x6d\x84\xa2\xa0\x47\xe5\xbc\x6c\xa0\x46\xf9\x5e\xe3\x25\x37\x65\x9a\xea\x97\xb7\xb1\x21\xcc\x6b\x1d\x5e\x78\x2d\xbb\xac\x2c\xa8\xeb\xc3\x05\x54\x2b\x7b\xc0\x10\x35\xb2\x63\xbb\x1c\x3e\x72\x5e\xce\x86\xd3\x16\x76\xff\x09\x3b\xba\x01\x58\xe2\xb2\xe4\x8f\xbf\x70\x26\x37\xb0\xdc\xc9\xc7\xbb\xf2\xbe\x59\x7d\x6d\xd6\x8c\x66\xe9\xb4\x3f\x90\xa3\xf2\x5a\x85\xf4\xe8\xfd\xec\xba\x22\xf7\x1c\x3e\xd5\x4c\xb7\x18\xe8\xac\x0f\x51\x79\x88\xe2\xe5\x8d\xec\xe3\x4a\xce\x93\x9b\x6e\x4b\x11\xca\x62\xce\x57\x18\x33\x5e\x85\x4b\x50\x15\x55\xa3\x1e\xb8\x2f\x95\x66\x2a\x00\x4d\x13\x9d\xce\x94\x51\xbe\xb8\x0e\xa6\x3e\xa0\xd9\x53\x53\xc1\x0f\xf6\xcc\x04\x53\xa6\x57\x01\xa8\xb5\x3d\xf3\x39\xb2\xea\x89\x97\x35\xcb\x42\x29\xe7\x20\x6e\x59\xd1\xb0\x16\x61\x1e\x90\x96\x8c\x09\x3e\x50\x49\xd7\x6f\x61\xaa\xfb\x1b\xa5\x84\x6e\xe4\xc6\x69\xb5\x3c\x1d\xc2\xc7\x77\x0b\x1b\x7d\xc2\x72\xe1\xab\xf7\x67\x6d\x17\x84\x6d\x3f\xfc\xce\xfd\xf2\x74\x08\x2b\xb9\x67\x7e\xd6\x7e\xf9\x7f\x76\xc9\x8b\x87\xe4\x35\x5e\x3f\xd3\x45\x98\x4f\xf2\x00\x2b\x0c\x4d\x1f\x08\x9b\x12\xce\x33\x31\x2c\xa4\x77\xf5\x86\x24\x63\x3a\xbe\xb1\x99\xde\xa7\x08\x04\xe5\x9d\x4a\x8a\xcb\x0b\xc7\x0f\x9d\x32\xfb\x0c\xc1\xf1\xae\x37\x16\x34\x2e\xec\x36\x5e\x31\xc7\x8a\xca\x21\x7a\xa6\xd7\xd4\xc1\xf9\xeb\x19\x71\xd6\xb1\xf2\xd9\x51\x1e\xb8\x3c\x01\xd2\x1f\x29\x27\x05\x72\xac\xa4\xd2\x93\x91\xdc\xa2\xfc\x8c\xe5\x7e\xbd\x4c\x3f\xfd\x87\x03\xb1\x08\x9d\x69\xd0\x07\x2c\x37\xd7\xa1\x9d\xf2\x9e\xd1\x75\xed\x60\x0a\xbb\x9d\x64\xa1\x34\xe3\x1a\x07\xb3\x8d\x14\x17\xd9\xf4\x6e\x6a\x7a\xfb\xe5\x87\x5d\xfe\x5e\x91\xf0\x64\xa4\x42\x69\x48\x96\x06\x99\x25\x9a\xf4\xa6\x4e\x6a\xa9\x18\xbc\x6f\xec\x4e\xb6\xfd\x99\xb4\xe6\xbf\xb3\x3b\xd7\x1b\xbb\xfb\x2a\x29\x04\xf4\xc7\xb4\xa1\xb8\x50\xfd\x07\xb6\x99\x6c\x92\xeb\x23\x8c\xfa\x87\xab\xfa\x60\xa9\xa5\xf5\xf2\x33\x61\x23\xdb\xa5\x8f\x46\x9f\xb2\x4a\x4e\x33\xbd\x3b\xa1\x3e\xef\x2f\xd9\x9a\x2f\x4d\x97\xf6\x66\x8a\xfe\x87\xcf\xd9\x9f\x52\x88\xef\x2c\x57\x6f\x1a\x08\xd3\xc0\x36\x93\xd1\x36\xaf\x1e\xa1\x37\xa1\x6f\x81\x2a\xd3\x37\x0f\x8a\xbc\xe3\x18\x5f\xaa\xdc\xbb\x8c\x4d\x0d\xfa\xe0\xd0\xc4\x17\xa1\xe9\xf5\xdc\x14\x54\xf9\x14\xf0\xc3\x4b\xed\xee\xe3\x0c\xfa\xdf\x00\x00\x00\xff\xff\x7f\x62\x94\x18\x13\x17\x00\x00")

func resourceResourceGoBytes() ([]byte, error) {
	return bindataRead(
		_resourceResourceGo,
		"resource/resource.go",
	)
}

func resourceResourceGo() (*asset, error) {
	bytes, err := resourceResourceGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/resource.go", size: 5907, mode: os.FileMode(420), modTime: time.Unix(1545361564, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Dockerfile": dockerfile,
	"Makefile": makefile,
	"cmd/check/main.go": cmdCheckMainGo,
	"cmd/in/main.go": cmdInMainGo,
	"cmd/out/main.go": cmdOutMainGo,
	"go.mod": goMod,
	"pipeline.yml": pipelineYml,
	"resource/resource.go": resourceResourceGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Dockerfile": &bintree{dockerfile, map[string]*bintree{}},
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"cmd": &bintree{nil, map[string]*bintree{
		"check": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{cmdCheckMainGo, map[string]*bintree{}},
		}},
		"in": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{cmdInMainGo, map[string]*bintree{}},
		}},
		"out": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{cmdOutMainGo, map[string]*bintree{}},
		}},
	}},
	"go.mod": &bintree{goMod, map[string]*bintree{}},
	"pipeline.yml": &bintree{pipelineYml, map[string]*bintree{}},
	"resource": &bintree{nil, map[string]*bintree{
		"resource.go": &bintree{resourceResourceGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

