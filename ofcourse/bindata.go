// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/Dockerfile
// templates/Makefile
// templates/cmd/check/main.go
// templates/cmd/in/main.go
// templates/cmd/out/main.go
// templates/go.mod
// templates/pipeline.yml
// templates/resource/resource.go
// templates/resource/resource_test.go
package ofcourse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x3d\x4b\xc5\x30\x14\xc6\xf1\xfd\x7c\x8a\x67\xea\x20\x24\x87\x82\x93\xe0\x20\x8a\x2f\x88\xa6\x04\x45\x04\x97\xbe\xc4\x10\x4c\x73\x4a\x92\xfa\xf9\xef\xd0\xde\xa1\xdc\xf1\xf0\xe7\x3c\xfc\x1e\xad\x79\x83\x97\xd8\x27\x7f\xd3\xea\xb6\xd5\xd7\xe8\x0b\x86\x35\xc4\xc9\x65\xa2\x7b\xd3\x7d\x43\x83\x47\x99\x1c\xd1\x97\xb1\xaf\x0f\x2f\xf6\x7c\xda\xcf\x77\xac\xa9\xb8\x8a\x27\xd3\xdd\x7d\x3c\xa3\x69\xf0\x43\x00\xe0\x05\xd5\x95\x0a\xf5\x0f\xcd\x5a\xeb\x43\x09\xa9\xd4\x3e\xc6\xad\x10\x5d\x0a\xb6\xe5\xf9\x6f\x0a\x19\x6a\x01\xcb\x52\x39\xbb\x22\x6b\x1e\xdd\x4e\x52\xea\x37\xcb\x7c\xbb\x3b\xc1\x59\xa4\xb2\x17\x1e\x42\xe2\xab\xe3\x07\xd3\x29\x00\x00\xff\xff\x43\x64\x48\x57\xe4\x00\x00\x00")

func dockerfileBytes() ([]byte, error) {
	return bindataRead(
		_dockerfile,
		"Dockerfile",
	)
}

func dockerfile() (*asset, error) {
	bytes, err := dockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dockerfile", size: 228, mode: os.FileMode(420), modTime: time.Unix(1545362408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcc\xc1\x4a\x03\x31\x10\xc6\xf1\x73\xe6\x29\x3e\x4a\xa0\xad\x90\xf1\xbe\xc5\x9b\x1e\xbc\x28\x54\xf0\x24\x48\x75\x66\x62\x70\x37\x81\x24\x5a\xa4\xf6\xdd\x65\xb5\x5e\x3c\x79\xfb\xf8\x31\xff\x49\x26\x6a\xb8\xbf\xda\xde\x5d\xdf\xde\x90\x94\xe7\x57\xad\x8f\x55\x63\x6a\xbd\x7e\xe0\x02\x87\x03\xf8\xf2\x5b\xb7\xbf\x78\x3c\x0e\x7e\x75\x2a\xd6\xa4\x63\xd3\xff\x76\xa4\x59\x92\xd1\xe9\x7c\x20\xf7\x33\xf0\xf4\x96\x46\x41\xe8\xf0\xab\x3f\x9f\xd6\x60\xa2\xae\xad\x0f\xe4\x62\xc1\xbc\x10\xde\xc1\xe7\xcc\x4c\x64\xd3\xec\x96\xb2\x80\x11\xf2\x6e\x52\x2c\xcf\x38\x96\x25\x3e\xb1\x7f\x49\xa3\xa2\xea\x4e\x10\x2a\x6c\x03\x29\x78\x20\xe7\x62\xb1\xa9\x23\xec\x11\x1a\x16\xde\xdb\x62\x33\xb3\x94\xac\xf4\x15\x00\x00\xff\xff\xbb\xb8\xb8\x4f\x0c\x01\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 268, mode: os.FileMode(420), modTime: time.Unix(1545362791, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdCheckMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xbd\x0a\xc3\x20\x14\xc5\xf1\x39\xe7\x29\xc4\xa1\xe8\xa2\x0f\xd1\xa9\x5b\xe9\x1b\x98\x5b\x13\x25\x35\x37\xf8\x31\x89\xef\x5e\x08\x4d\xb7\xff\xe1\xc0\xef\x70\xb4\xb9\xd5\x8b\xe4\xe2\x0e\xc4\x74\x70\xae\x42\x61\x92\xbd\x0b\xf3\x38\xe7\xd3\xd5\x20\xc6\xb0\xd9\x17\x6e\x99\xbc\xc4\x24\xd7\x58\x43\x9b\x0d\x71\xb2\xf4\xe1\xf6\x9e\xb9\x14\xcb\x0b\x71\xcb\xc5\xff\x43\x42\x03\x4b\xdb\xe9\xe4\x95\x16\x1d\xd3\xf5\x99\x7b\xf0\xb4\xa9\xdb\xa5\x9a\xd7\x2f\xfa\xd0\x18\xf8\x06\x00\x00\xff\xff\x7d\x4e\xa3\xf9\x98\x00\x00\x00")

func cmdCheckMainGoBytes() ([]byte, error) {
	return bindataRead(
		_cmdCheckMainGo,
		"cmd/check/main.go",
	)
}

func cmdCheckMainGo() (*asset, error) {
	bytes, err := cmdCheckMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/check/main.go", size: 152, mode: os.FileMode(420), modTime: time.Unix(1545364451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdInMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x31\x0e\xc3\x20\x0c\x45\x77\x9f\xc2\x62\xa8\x60\x81\x73\x64\xab\x7a\x03\xe2\x92\x04\xb5\xe0\x08\xf0\x84\xb8\x7b\xa5\x28\x49\x3d\x3d\x59\x4f\xff\xed\x9e\x3e\x7e\x0d\x98\x7c\xcc\x00\x31\xed\x5c\x1a\x6a\xc0\xf3\x54\xef\x68\xa7\xe3\xfb\xf4\x6d\xc3\x31\x5c\x09\x95\xa5\x50\x50\x7f\x69\x8d\x6d\x93\xd9\x12\x27\x47\x5f\x96\xf7\xcc\xb5\x3a\x5e\x88\xa5\xd4\x70\x83\x02\x03\xb0\x48\xa6\x23\xa6\x0d\xf6\x7b\xe1\x52\xec\x94\xf5\xe3\x0a\xd8\xd7\x09\x7d\x18\x18\xf0\x0b\x00\x00\xff\xff\x29\x86\x1f\xc2\xaa\x00\x00\x00")

func cmdInMainGoBytes() ([]byte, error) {
	return bindataRead(
		_cmdInMainGo,
		"cmd/in/main.go",
	)
}

func cmdInMainGo() (*asset, error) {
	bytes, err := cmdInMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/in/main.go", size: 170, mode: os.FileMode(420), modTime: time.Unix(1545364446, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdOutMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x31\x0e\xc3\x20\x0c\x45\x77\x9f\xc2\x62\xa8\x60\x81\x73\x74\x6a\xd5\x1b\x10\x97\x24\xa8\x25\x8e\x00\x4f\x88\xbb\x57\x8a\x12\xea\xe9\xc9\x7a\xfa\x6f\xf7\xf4\xf1\x4b\xc0\xe4\xe3\x06\x10\xd3\xce\xb9\xa2\x06\x3c\x4f\xb5\x86\xf6\x7e\x7c\x9f\xbe\xae\xd8\xbb\xcb\xa1\xb0\x64\x0a\xea\x2f\x2d\xb1\xae\x32\x59\xe2\xe4\xe8\xcb\xf2\x9e\xb8\x14\xc7\x33\xb1\xe4\x12\x06\x28\x30\x00\xb3\x6c\x74\xc4\xb4\xc1\x36\x16\x2e\xc5\x3e\xa4\xea\xdb\x55\xb0\xaf\x13\x5a\x37\xd0\xe1\x17\x00\x00\xff\xff\x44\xcd\xfd\xef\xab\x00\x00\x00")

func cmdOutMainGoBytes() ([]byte, error) {
	return bindataRead(
		_cmdOutMainGo,
		"cmd/out/main.go",
	)
}

func cmdOutMainGo() (*asset, error) {
	bytes, err := cmdOutMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/out/main.go", size: 171, mode: os.FileMode(420), modTime: time.Unix(1545364439, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goMod = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcd\x4f\x29\xcd\x49\x55\xa8\xae\x56\xd0\xf3\xcc\x2d\xc8\x2f\x2a\x09\x48\x2c\xc9\x50\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xc8\x9d\xfe\x34\x19\x00\x00\x00")

func goModBytes() ([]byte, error) {
	return bindataRead(
		_goMod,
		"go.mod",
	)
}

func goMod() (*asset, error) {
	bytes, err := goModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go.mod", size: 25, mode: os.FileMode(420), modTime: time.Unix(1545193601, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pipelineYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xb1\x6e\xe3\x30\x10\x44\x7b\x7e\xc5\x00\xd7\x9e\x7c\xd5\x35\xaa\x93\x22\xad\x7f\x40\x5a\x4b\x2b\x6a\x63\x8a\x2b\x90\x4b\x05\x86\xe1\x7f\x0f\x64\xcb\x41\x10\x27\x40\x5a\xce\xe3\x3c\xec\x24\xce\x5a\x52\xc7\x8d\x9d\x66\xce\xb5\xab\x10\x69\xe2\x1a\xe7\x33\x76\xfb\x2d\xc3\xe5\xe2\x80\x15\xa8\xd1\x6b\x77\xe4\x54\xc9\x44\x9e\x1d\x70\x03\x6a\x07\x00\x89\x67\xcd\x62\x9a\x4e\xb7\xef\x4f\x57\x74\xcf\x5e\xb2\xa5\xd3\x5a\xe2\xee\xb6\x5f\x88\x1e\xdf\xbb\x91\xbb\x63\xc3\x0b\xaf\x82\xff\xd3\x17\xfb\x1f\x3c\xaf\x09\xee\x0a\x74\x89\xc9\xb8\x47\xc9\x12\x3d\x74\xe8\xb4\xa4\xcc\x78\x93\x10\x30\xd2\xc2\x68\x83\xfa\x26\xf0\xc2\xa1\xdd\x1a\x28\x83\x22\x68\x21\x09\x74\x08\x0c\x9d\x4d\x34\x42\x22\x6c\x64\xdc\x7b\x35\x0e\xe2\x4b\xa2\x35\xdb\xe1\x65\x40\x54\xdb\x0a\xbc\x2c\x1c\xff\x42\x0c\x3d\x0f\x54\x82\x65\x98\xa2\x95\x38\x68\xbb\xbb\x32\x1f\xce\x1a\x3d\x1f\x8a\x77\xee\x55\x0f\x9f\xe6\xe8\xb5\x92\xb5\x6d\x0e\x14\xd7\xc3\x2a\x78\xb6\xef\xd6\x00\x2c\x89\xf7\x9c\x6a\x58\x2a\x7c\x45\xe7\xf2\x03\x3a\x53\xa2\x29\xdf\x86\x02\x16\x4e\x59\x34\x36\x33\xd9\xf8\xc0\xff\xdb\x52\xf7\x1e\x00\x00\xff\xff\x80\x32\xbf\x14\x1a\x02\x00\x00")

func pipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_pipelineYml,
		"pipeline.yml",
	)
}

func pipelineYml() (*asset, error) {
	bytes, err := pipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pipeline.yml", size: 538, mode: os.FileMode(420), modTime: time.Unix(1545282186, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceResourceGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x4d\x93\xdb\xc6\xd1\x3e\x13\xbf\xa2\xc5\x2a\xbf\x26\xfd\x22\x60\x9c\x72\xe5\xb0\xa9\x3d\xc4\x92\x5d\xde\x24\x96\x54\xfa\xb0\x0e\x2a\x55\xd8\x04\x1a\xc4\x88\xc0\x0c\x3c\x33\x20\xc5\x52\xed\x7f\x4f\x75\xcf\x0c\x00\xee\x4a\x59\x4b\x39\x2d\xc9\xed\xe9\xee\xe9\x8f\xe7\xe9\x9e\xcd\x06\x9e\x63\x79\xc0\x3d\x81\x25\x67\x06\x5b\x12\x28\x07\xa8\x41\x75\x7d\x4b\x1d\x69\x8f\x5e\x19\x0d\xa6\x06\x84\xc7\x46\x97\x66\xb0\x6e\x12\x2e\xb2\xfe\xce\xf1\x2c\x53\x5d\x6f\xac\x87\x55\xb6\x58\x92\x2e\x4d\xa5\xf4\x7e\xf3\xde\x19\xbd\xe4\x1f\xac\x35\xd6\xf1\xa7\xba\xf3\xcb\x6c\x61\x4a\x58\xee\x95\x6f\x86\x5d\x51\x9a\x6e\x53\xb6\x66\xa8\x76\xc6\xb9\x8d\xa9\x83\xa5\xf1\x03\x9f\x51\x66\xa3\xcc\xe0\x55\xcb\x5f\x9c\xb7\xa5\xd1\xc7\x65\xb6\xce\xb2\xcd\x06\x5e\x35\xca\x5d\xdc\xc1\xe8\xf6\x0c\x08\xee\x40\x2d\x79\xa3\xa1\x36\x16\xf6\xe4\xbd\xd2\x7b\x70\x1e\xad\xa7\xaa\x80\x37\x0d\x7a\x50\x1e\x2a\x43\xee\x2a\xdb\x6c\x58\xd3\xcf\xc6\xc2\xf6\x71\x43\xe5\x61\x9b\xf3\xff\x94\x2e\xad\x44\xc2\x81\xf2\x0e\x8e\x64\x1d\x47\x84\xb0\x6c\xc0\xab\x8e\x44\xc6\x41\x89\x6d\x4b\x55\x1e\x74\xb3\x91\x93\xf2\x0d\x6c\x3f\x2e\x4b\x33\x68\xbf\xbc\x82\xe5\xf7\xcb\xdb\x6d\x01\xaf\x1a\x62\x2b\x9a\x3e\xf8\x51\xd7\xc9\x0c\x6d\x05\x3b\xba\x10\xff\xcb\xf2\x76\x9b\x03\xea\x0a\x9c\x01\xa3\x8b\xb9\x7b\x37\x3a\xf8\x76\xb2\xca\x93\x03\x84\x5a\xb5\x04\xa5\xd1\x1e\x95\x66\xe3\xbe\x21\x68\xd1\x93\x9b\x8c\x78\x23\xfe\x9b\xc1\xf7\x83\x87\x4a\x59\x2a\xbd\xb1\xe7\x0b\xbd\xcf\x06\x1f\x14\xb7\xc6\x1c\x1c\x28\x2d\x8a\x46\x59\x28\x2d\xa1\xa7\x0a\x76\x67\xf1\x41\x82\xca\x12\xc9\x86\xb8\xc1\x2e\x5b\xc2\xca\x85\xe8\x79\x03\x08\x1d\xf6\x39\x5b\xb1\xe4\x07\x2b\x1e\x2a\x0f\x3b\x2c\x0f\xec\xd6\x58\x57\xc9\x97\x1b\x0d\x25\x3a\x62\xd5\x36\x16\xe4\x99\x6f\x57\x0f\x62\x05\x77\x66\xf0\x70\x6a\x54\xd9\x44\xdf\x94\xd1\x2e\x78\xc4\xc6\xe5\x1a\x60\xa9\x26\x0b\xde\xe4\x70\x36\x03\xb8\x46\x62\x3c\x96\x35\x9b\x91\x03\xde\x88\xb3\x60\xa9\x33\x9e\xb8\x66\x74\x15\xe2\x0a\xad\xe1\xa4\x9e\x73\x36\xd5\x52\x54\x1b\x15\xc9\x99\x28\x30\x3b\x92\xb4\x14\xa2\x3c\xdc\xb8\x24\x75\x24\x69\xaa\xbb\xb1\x0f\xd9\x0d\x0a\xfb\x16\xb9\x70\xbd\x54\xf1\xd0\xfa\x78\x79\xac\x3d\x59\x0e\x9b\x55\x74\x8c\x71\xab\xad\xe9\xc0\x99\x8e\x60\x35\xb8\x81\x3d\x58\x07\x4b\x6c\x1b\x42\x0b\xe4\x12\x2f\xb5\x1f\x2c\x55\xe0\x1b\x6b\x86\x7d\x03\xdb\xf0\xbf\x6d\x4a\x6c\xaf\x7a\x6a\x95\xa6\x6f\x67\xad\x53\x51\xad\xb4\xe2\x88\x16\x63\x20\xc7\x1b\xb0\x19\xa5\x2f\xef\x90\x02\xc8\x5e\xe5\xff\xf5\x46\x29\xdf\x6c\xfa\xc2\xd9\x94\x77\x69\xe2\xb1\x63\x27\x97\x0c\x39\xd0\xc6\x43\x45\xd8\x86\xbe\xc2\x4b\x05\x7f\xe3\xb0\x38\x4e\xee\x39\x96\xde\x98\x12\x17\xb2\x24\xa5\xe9\x92\xa1\x7f\x12\xf5\x1c\x84\x4e\xe9\x2a\x07\xcf\x66\x47\xc8\xd0\x40\x1f\x90\xcb\xe4\x11\xfc\x48\x27\xb4\x24\xe0\xd7\x9e\xf0\xec\x66\xe5\x8b\x30\x68\xf5\xfb\x30\x95\x3e\x43\xc2\x91\xb8\x47\x18\x3a\xd8\x08\x5f\xf3\x84\xe7\xa0\x3e\xea\x94\xbb\x14\x70\x53\x4b\x51\x36\x78\x24\xe8\xb8\xb8\xdd\x50\x36\xe3\x85\x1d\x78\xc6\x25\x36\x2d\xca\x88\x83\x4b\xbf\x0f\xa4\x3d\x3b\x58\x5a\xe3\x9c\x1c\x63\x2b\x29\x87\x2e\x00\x82\x6a\x5b\xe0\xfc\x20\xb4\xc6\xb3\xe7\xad\xc1\x8a\x9d\x93\x46\x46\x8f\x3b\x74\x9c\xef\xc7\xcf\x5f\x17\x59\x76\x44\xcb\x40\xbd\xd9\xc0\x4f\xd6\xfe\x16\x6f\xd2\x11\xea\x09\xe7\x3a\xec\x39\x36\x1d\xb6\xb5\xb1\x1d\x55\xd9\x62\x26\x7a\x0d\x01\xd1\x8b\xa7\x74\x5a\x6d\x0f\x74\x86\x88\x5f\x92\xae\xda\x0c\xba\xe2\x30\xcf\x74\x6d\xd7\xc9\xdc\x73\xb4\xd8\x45\x63\x3d\x7f\x26\x4f\xd6\xc9\xad\x2f\x8d\x05\xc1\x4b\x53\x9d\x72\x8e\xd3\xb0\x8c\xaa\xff\xdd\xa3\x6f\x96\x93\x9e\xed\x3a\xf2\xc2\x8b\x91\x12\x52\xe7\x3b\x09\x45\xe2\x95\x62\x12\xd0\x9e\x6c\x8d\x5c\x8d\xfe\xdc\xd3\x74\xd2\x79\x3b\x94\xfe\xe3\xad\xe8\x13\x62\x78\x58\x59\x10\xeb\xc8\x37\xa6\xe2\x56\xb4\x96\x5c\x6f\x74\x25\xd8\x1c\x3a\x60\x63\x7a\xbf\x49\x29\xdf\x48\xa2\xa1\x34\x5d\x87\xba\x2a\xc6\x66\x18\x89\x05\x4e\x0d\xe9\x19\x03\x4b\x4f\xc4\xde\x0a\x26\x45\x83\xcb\xc1\xd8\x20\xcb\x36\xb6\x75\x1b\x0b\xf2\x4f\x49\x6e\x9b\x8c\xb0\x6e\x3b\xe8\x22\xab\x07\x5d\xc2\xca\xc2\x77\xc9\xfb\x75\x70\x7f\x15\x15\x9b\xb2\x78\x19\x31\x65\x2c\xf6\xb2\x88\x25\x90\x43\x6b\xf6\x7b\xb2\xf0\x9d\x29\x8b\x7f\xc9\xc7\x35\xac\xde\xbe\x9b\x4b\x48\xe2\xd6\xf0\x51\x32\xff\x42\x5a\x88\x2a\xd8\x46\x65\x6e\xc4\xd4\x1d\x01\xb6\x2d\x17\xed\x8c\x53\x1c\x38\xa5\x4b\x0a\x71\xd6\x04\x7b\x75\x24\x9d\x00\x2c\xe9\xd8\x8a\x6a\xb4\xfb\x81\x93\x22\xfd\x35\xfe\x8b\xef\xa9\x55\xcb\x6d\x4e\x3a\x76\xb0\x1c\xae\x95\x75\x1e\xf0\x88\xaa\xc5\x5d\x3b\x1a\x2c\x98\x7e\xa4\x29\x99\x83\x5c\xc0\x61\xd1\x2f\xcd\xb5\xa3\x80\x13\xec\xcb\x8c\x5a\x83\xde\x1c\x2a\xea\x29\xa4\x39\xf6\x9c\xd4\x92\xa9\xa7\x3c\xed\x48\x60\x3c\x55\x10\x55\x85\x28\x67\xfe\x8d\x20\x91\x03\xc2\x5e\xf9\xe9\xc8\x29\x52\x8e\xb8\x8e\xd0\x2a\x27\xad\xcd\x89\xe4\x12\xf8\x7c\x80\x44\xf3\x14\x89\x14\x20\x66\x34\xb2\x84\x11\x68\x82\x7a\xee\xd8\x0e\x0f\x04\x8e\xb4\x23\xa1\xf6\x09\x90\x22\xd9\x1a\x91\x12\xd8\x62\xf8\x61\xed\x07\xa5\x2b\xc1\x19\xa5\x09\x6d\x0a\x89\xd2\xfb\x22\xcb\x16\x02\x06\x70\x75\xcd\xc3\x4f\xb6\x50\xf5\x18\xb1\x47\xd7\x9c\x13\x2e\x89\x85\x69\xab\xc7\x2c\x96\x83\x39\xb0\x68\x14\x79\x1b\x91\xe4\x5d\xb6\xe0\x83\x8f\xcc\x41\xa4\x17\x31\x0a\x92\xd1\x09\x89\xb2\xc5\xe2\x96\x05\xa5\xd8\x58\x4b\x1c\x0f\x8b\xbf\x7b\xa3\x56\xc9\xc4\x3a\xe8\x62\x91\x99\x03\x17\x2a\xc9\xda\xa8\x2b\xf8\x3e\x69\xba\xf1\x06\x57\x0a\xfe\x1f\xbe\x5f\x67\x8b\xdb\x4c\x2e\x7f\x33\x6b\x49\xce\x5a\xba\x5e\x98\xa1\xd1\xee\x94\xb7\x68\xcf\xe0\x48\x12\xe6\xbc\xe5\xdc\x1f\xe8\x1c\x08\x2a\x7e\x3f\x62\x3b\x30\x37\x2d\x52\xd7\xf7\x3c\x42\x96\x43\x3b\xc5\x93\xd9\xdc\x29\xc7\xf3\x5b\x0d\xef\x07\xce\xbf\x26\x56\x24\x7a\x44\x41\x91\x2d\x34\x9d\x12\x32\x5f\x5d\xcf\x9a\x74\x9a\x2a\xe5\x2f\x3b\x3f\x76\xd7\xd5\x35\xcc\xbb\xf5\xe3\xa4\x83\xc5\x62\x68\x92\x74\xce\x41\xca\x02\x12\xde\xe8\x87\x61\x90\x3b\xe9\x8f\x63\xa0\xd2\x0f\x02\xe0\x7c\x09\x79\x6f\x76\x01\x06\xb7\x7b\xf2\xdb\xd4\x6f\xd3\x6a\xf2\x09\x5c\xbb\xd1\xab\x30\x83\x3d\x19\xc7\x97\x90\x83\x1c\xee\x83\x9d\x90\x89\xe3\x5f\x84\x81\xdc\x27\xe1\x2f\x5b\x7c\x0a\xff\xe6\xe8\x67\xca\xe2\x57\xf2\xc8\xdc\x7b\x07\x0a\x9f\x50\x67\x02\x45\xef\xf7\xdc\x30\x23\xe5\xb8\x84\x88\x9a\x47\x0a\x18\xb8\x1d\x3b\x5f\x3c\xb7\x4a\xfb\x9a\x01\x1e\xf5\xd9\x37\x61\xce\xc7\xb4\x05\x88\x4a\x6f\x78\x01\xd1\x15\xda\x2a\x4e\x9b\x39\xa0\x1b\x27\x03\x4e\xc2\xd0\xcb\x6c\x09\xff\x78\xf9\xec\x69\x9a\x48\xe9\x43\x4f\x65\x1c\xec\x67\xd3\x78\xbc\x5b\xf1\x13\x7b\x5d\xaf\x96\x29\x23\x3c\x23\xf1\x4f\xcb\xf5\x28\xf2\x06\xad\x9e\x4b\xc0\x09\x65\x50\x9a\x89\xdc\xe8\xda\x5c\x2a\x51\x9a\x69\x5e\x36\x4c\x6c\xa1\x23\xe7\x70\x4f\xb3\x13\x4f\x68\x37\xec\x2f\xb4\x56\xfc\xcb\x4c\x52\x2e\xfd\x46\x46\xef\x0b\x3e\x18\xa1\x0e\x64\xfd\x90\xbd\x24\x72\xc6\xdd\x21\x3c\x17\x1d\x2e\x14\x64\x98\x78\xb9\x72\x64\xed\x2d\x51\x87\xe1\x56\xf9\x22\x5b\x84\x93\xcf\xd1\x37\xdc\x35\x9c\x91\x97\xbd\xa4\x64\xb5\xfc\xc6\x6d\xa2\xe9\x65\x0e\x77\x4a\x6c\x9d\x2d\x76\x67\xcf\x03\x5a\xc4\x26\xde\x86\x8b\x5f\xd1\xba\x06\xdb\x55\x3c\xb6\xce\x3e\x81\x4c\x73\x60\x9a\xd0\xe9\xf6\x5e\x7c\x62\xad\x5d\xc1\x37\x6e\x99\xc7\x8a\x5e\x89\xcd\x35\x87\x88\xb5\x5e\x43\x58\x9d\x0b\x09\xd6\xcf\xaa\xa5\xd5\x74\x9d\x1c\xa2\x83\x7f\xfe\xeb\x0f\x3f\x7c\x91\x27\x12\xbb\x54\xde\x17\x20\x35\x81\x9f\xc6\x8e\x36\x02\x51\xd0\xa3\xb2\x4e\xa8\xa5\x52\xae\x6f\xf1\x9c\x92\x32\x75\xf5\xeb\x9b\x90\x10\xc6\xb5\x0e\xcf\xcc\xb7\x36\x8d\x0c\xd4\xf5\xfe\x0c\xaa\x16\x16\xd2\x44\x95\x90\x67\x97\xcc\x07\xcc\x4b\xde\xb0\xdb\x02\xef\x4f\xb1\xa3\x2b\x80\x25\x2e\x73\xfe\xfa\x1b\x7b\x72\x05\xcb\x9d\x7c\xbd\xcd\xef\x8a\x95\x97\x62\xd5\x28\x16\x6f\xfb\x0b\x59\xca\x2f\xc7\x8b\x1e\x9d\x9b\xad\x59\xb2\x9f\xf1\xad\x66\x03\x89\x86\xce\x38\x1f\x46\x0a\x99\xd4\x99\x6a\x5d\xe0\xda\xd4\xb9\x71\xcb\x0b\xa5\x2c\xe2\xbc\x7a\xe9\x71\x85\xcf\x41\x15\x54\x8c\x44\x7f\x77\x06\x9a\xd1\x3b\xea\x2a\x28\x9d\x8d\x3c\x69\xe1\x1e\x74\xd9\xa0\xde\x53\x55\xc0\x2f\xe6\xc4\x00\x93\xc7\x27\x0c\x6c\x5b\x73\xe2\x7b\xa4\x71\x26\x2c\x99\x86\x27\xa0\xe4\x83\xa8\xe5\x51\x85\x87\x0c\xc6\x01\x49\xc9\xe8\xe0\xbd\xf1\xe7\xf2\x1d\xa9\xb8\xcb\x28\x39\x74\x23\x36\x4e\xd4\xf2\x6c\xf0\x0f\x73\x0b\x0b\x7d\x01\xb9\x98\xc1\x7f\x1d\xbb\x20\x6c\xfb\xe1\x0f\xf2\xcb\xb3\xc1\xaf\x64\x3f\xfe\x2a\x7e\xf9\x5f\xb8\xe4\xd5\x7d\xf0\x1a\xd7\xe6\xb8\xc0\xf3\x4d\xee\xd5\x0a\x97\xa6\xf3\x84\x55\x0e\xa7\xd9\x94\x2b\xa0\x77\xf1\xb2\x93\x6a\x3a\xbc\x34\x4d\xef\x40\x52\x82\xf2\x16\x14\xed\x32\xe1\xb8\xa1\x53\x7a\x9f\x4a\x70\xdc\x51\xc7\x80\x06\xc2\xae\xc3\x6a\x3c\x46\x54\x2e\xc1\x8b\x5c\xca\xe0\xfc\x59\x49\x94\x75\x3c\xf9\xec\x28\x35\x5c\xea\x00\xc9\xcf\xb4\x43\x16\xe3\x78\x13\xc0\x2d\xcc\x95\x21\xdc\x6f\x2f\x37\xc6\x77\xd9\x7c\xb8\xbc\x87\x72\x69\xfb\x1c\x9b\x5f\xc2\x7c\x99\xe1\x19\xd7\x04\x8a\x9a\x5e\xcb\xa6\xf7\x38\x37\xec\xd2\xef\x8a\x04\x01\x03\xc8\x49\xa8\x13\xe9\xa7\xfe\xaf\xe2\xdb\xa1\x44\x49\x71\x59\xbe\x37\x3b\xe1\xf1\x13\xb5\x2d\xff\x9d\xad\x49\xef\xcd\xee\xdb\xc8\xfd\xe8\x0e\x91\x7b\x38\x04\xfd\x67\x78\x4a\x38\xe2\xf2\x0a\xe3\x64\xc3\xf1\xba\x47\x57\x91\x38\x5e\x10\x56\xc2\x1b\x7d\x10\xfa\x12\x92\x38\xce\x26\xd9\xa9\x9e\x13\x33\x09\x1f\xbe\xd6\x5d\x64\xc4\x68\xfd\xff\xbe\x86\x19\x25\x10\x3f\x1a\x8e\xde\x54\xea\xba\x82\x6d\x82\x99\x6d\x22\x15\x01\x2e\x01\x66\x29\x42\x06\x66\x6e\x01\x79\x7f\x18\x9f\x79\xee\xec\x4f\x53\x82\x3e\xdb\x0e\xe1\x69\x36\x3e\x18\x4e\x46\x95\x8b\x06\x3f\x4f\x57\xb7\x0f\x63\xe3\x7f\x02\x00\x00\xff\xff\x72\x4c\xa7\x12\xaf\x17\x00\x00")

func resourceResourceGoBytes() ([]byte, error) {
	return bindataRead(
		_resourceResourceGo,
		"resource/resource.go",
	)
}

func resourceResourceGo() (*asset, error) {
	bytes, err := resourceResourceGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/resource.go", size: 6063, mode: os.FileMode(420), modTime: time.Unix(1545444217, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceResource_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x6f\x4f\xe4\xb6\x13\x7e\x9d\x7c\x8a\x91\xa5\xfb\x29\xfb\x53\x9a\x6c\xdb\x2b\x48\x48\xbc\xa8\xee\x40\xa2\x3a\xfe\x08\x28\x7d\x81\x10\xf2\x3a\x93\x5d\x97\xc4\x4e\xed\x09\x3d\x84\xf6\xbb\x57\xe3\x24\x4b\x96\x83\xbd\xbd\xd3\xfd\x91\x8e\xb5\x63\xcf\xcc\xe3\x99\x67\x1e\xbb\x91\xea\x4e\xce\x11\x1c\x7a\xdb\x3a\x85\x71\xac\xeb\xc6\x3a\x82\x24\x8e\x04\x1a\x65\x0b\x6d\xe6\xf9\xdf\xde\x1a\x11\x47\xa2\xac\x89\x7f\xb4\xcd\xb5\x6d\x49\x57\x3c\xb1\x9e\xff\x36\x92\x16\x79\xa9\x2b\xe4\x01\x7f\x20\xf4\xa4\xcd\x5c\xc4\x71\x64\x15\x88\xb9\xa6\x45\x3b\xcb\x94\xad\x73\x55\xd9\xb6\x98\x59\xef\x73\x5b\x2a\xdb\x3a\x8f\xab\x01\x1b\x8e\x76\x7a\x72\x48\x6a\xe1\xf2\xe0\xac\x7c\xc8\xa5\xf7\xe8\x48\xc4\x93\x38\xbe\x97\x8e\x31\xf2\xca\x07\x3b\x9f\xa3\x83\x7d\xb0\x2a\x3b\xc1\x7f\xbb\x69\x62\x55\xf6\x1e\x67\xed\xfc\x03\xde\x63\x35\x61\x93\xb2\x35\x0a\x2e\xd1\xd3\xbb\x05\xaa\xbb\x84\xe0\xff\x3d\xc8\xec\x72\x02\x8f\x71\xc4\x2e\xf9\xcb\x3b\xe9\xd1\xc3\x3e\x5c\xdf\x78\x72\xad\x22\x5e\x8b\xba\xf4\x1c\x19\x00\xe0\x38\x17\x5d\xb6\xa2\xe8\x1e\x9d\xd7\xd6\x84\x05\xab\xb2\xab\x6e\xfa\xb4\xe0\x4f\x5b\x82\xeb\x9b\xb5\x25\x74\x0e\x86\x7f\xe8\x9c\x75\x71\xb4\xe4\x18\xfc\x3f\x5a\x39\x7f\x5c\xa6\x3c\x37\xba\x0a\xbf\x63\x1f\x8f\xa3\xa1\x50\xb6\x35\x24\xf6\x40\xfc\x2c\x96\x6b\x26\x61\xf2\xa2\xcf\x97\xcd\xa7\xd3\xa9\x58\x6e\x1b\x6b\x3a\xfd\xba\x70\xa6\xad\xd1\xd9\x1e\xee\xda\x01\x0f\x9c\xeb\x77\x0d\xde\x96\x71\x1c\x95\xd6\xc1\x6d\x0a\xa4\x60\x6f\x1f\x9c\x34\x73\x1c\xd5\x88\xa3\x39\x5e\x38\xef\xe9\xfb\xb8\x1c\x65\x3e\xe5\xe4\x06\xb3\xac\xaf\xb8\xca\x86\x32\xb2\xc7\x6c\x55\xbb\x14\x9e\x78\x34\x89\xa3\xa8\xe3\x59\x76\xf0\x4f\x2b\xab\x84\xc6\x7b\xb9\x9c\x29\x0c\x93\x57\xf6\xa2\x73\x21\xf6\x84\x8f\xb0\x1c\x11\xef\xc8\x7c\x23\xd6\x35\xd2\xc9\xda\xaf\xbe\x9f\x85\xe9\x26\x36\xd6\x48\xb2\x90\x24\x99\x8d\x56\x65\xc7\xfd\xf4\x4b\xc9\xb8\x8a\xb5\x91\x48\x62\xb5\x38\xc4\x09\xce\xa2\xc7\x13\x59\xe3\x1e\x08\x29\x52\xb8\x92\x55\xcb\xe3\x99\x58\xa6\x30\x2c\xa8\xd1\x42\xd1\x7b\xd9\x9e\x63\x5b\x20\xfb\xe5\xd7\xb7\xdf\x17\xdc\x56\x94\xa5\x62\x45\xcd\x4e\x47\xb3\x4b\xac\x9b\xf7\xda\x25\x42\xa4\x20\x06\x2d\xfe\x49\x8c\xf8\x75\xa2\x03\xbb\x3a\x56\x45\x05\x96\xe8\xc0\xfa\xec\x1c\x6b\x7b\x8f\xbf\x57\x55\x42\xc5\x24\xde\xd4\x0e\x29\x0c\x1c\x18\xf5\x05\x13\xb2\x08\x9c\x5d\x6b\x8c\x81\x5e\x9b\xba\x24\x8e\xa2\x3c\x87\x43\xed\x3c\x85\xef\x40\x0b\xbe\x46\xa8\x75\x06\xee\x39\x4d\x7e\x63\x23\xb1\xbb\x7e\xf8\x4a\x17\x8d\x28\xfb\x84\xfd\xb3\x1d\xd7\xc1\x3a\x30\xbe\x75\x18\x20\xd9\x96\x9a\x96\x80\xef\x26\x58\x48\x0f\x33\x44\x03\xca\xa1\x24\x2c\x42\x27\xd1\x82\x73\x51\xd6\x94\x5d\x34\x4e\x1b\x2a\x13\xf1\xc6\xe7\x3d\x36\x91\x02\x27\x36\x8a\x6e\xd3\xe0\xe2\xa0\xcb\x9c\xf5\xd9\x05\x49\x4a\xd8\x7a\x04\xe9\x50\x56\x1e\x19\x92\xf5\xd9\x91\x3f\xb1\x74\xf0\x51\x7b\x4a\x7a\xc3\xc9\x80\xee\x1c\x65\xf1\x1c\x5b\x1c\x45\xb3\x07\x42\xff\x9c\x19\xbc\xf7\x50\x57\xf8\x3c\xd4\x98\x0f\x9f\x9c\x59\x59\x43\x68\xc8\x83\x74\x08\xd2\x03\x7e\x6c\x50\x75\xe7\x65\xb9\x71\x28\x8b\xbe\x39\xe0\x93\x8b\x69\x1f\xf8\xb6\xcf\xfe\x34\xb5\x74\x7e\x21\xab\xa4\x87\xf5\xbf\x91\xd5\x66\x8d\xe4\xd2\xae\x6f\x5e\x57\xc1\xd3\x96\x7e\x8c\x0c\xb2\xd8\xfd\x10\x19\x1c\xae\xb0\xd1\x55\x16\xd6\xb7\x95\x2c\xd1\x03\xbe\x0d\xaf\xa7\x3d\x10\x0b\x7c\x58\x31\x70\x83\x9e\xbd\xfd\x6d\x67\xf7\x05\x3d\xfb\x3a\x55\xca\x73\x38\x96\x77\x08\x12\x08\xeb\x06\x0a\xed\x80\x2c\xcc\x3a\x46\x69\xc3\x44\x2d\xb4\x43\x45\xd6\x3d\x7c\x67\x11\xcb\x73\x38\x2a\x61\x9c\x14\x68\xd8\x45\x01\xda\x40\x57\xf4\xb4\xef\xe1\x80\xae\xdf\xd9\x35\x39\x2d\xd0\x8d\x5e\x66\x67\x92\x16\x29\xd8\x3b\x06\x3a\x92\xb6\xeb\xf5\x9c\xdf\x64\x89\x27\xa7\xcd\x9c\x81\xe9\x92\xf7\x87\x9a\x95\x6d\x55\x5d\x3d\x39\x7a\x49\x29\xde\xf8\x20\x12\x2b\x39\x3b\x0b\x8d\xca\xc6\x79\x0e\xef\x3a\x90\xd2\x3c\x40\x85\x92\x1f\xd3\xe0\xdb\xd9\x90\x47\x8d\x9e\x4f\x34\xc0\x67\x24\x6c\xd7\xb5\xa1\xf5\xd9\xf1\x5d\xa1\x1d\xe7\x65\x78\x59\x67\x9c\xdf\x67\x98\x26\x29\x4c\x77\x77\x77\x19\xf8\x2b\xe2\xd0\x95\x36\x74\xf3\x5a\xba\x6a\xd9\x70\x89\xff\xb8\x38\x3d\xe1\x5d\x83\x6a\xac\xea\x1a\x84\xa0\x37\x4c\x9e\xfa\xfb\xb4\xa5\xcf\x04\xfb\xcb\x69\xc2\xe0\x97\xfd\xf7\xf2\xd6\x1f\xab\x27\x4b\xd8\x12\x84\xed\xd9\x71\x52\xb8\xbe\x61\xc9\x49\x06\x38\x7c\xbe\x9d\x9d\x9d\xd7\x42\x46\x81\xdd\x5f\x78\xef\x05\x09\xda\x7c\xf1\x6d\xf9\x20\x1c\xbf\x07\xbf\xe9\x45\x16\x44\xf3\xbf\x00\x00\x00\xff\xff\xe7\x3f\xcb\xe3\x9f\x0d\x00\x00")

func resourceResource_testGoBytes() ([]byte, error) {
	return bindataRead(
		_resourceResource_testGo,
		"resource/resource_test.go",
	)
}

func resourceResource_testGo() (*asset, error) {
	bytes, err := resourceResource_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/resource_test.go", size: 3487, mode: os.FileMode(436), modTime: time.Unix(1545455859, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Dockerfile": dockerfile,
	"Makefile": makefile,
	"cmd/check/main.go": cmdCheckMainGo,
	"cmd/in/main.go": cmdInMainGo,
	"cmd/out/main.go": cmdOutMainGo,
	"go.mod": goMod,
	"pipeline.yml": pipelineYml,
	"resource/resource.go": resourceResourceGo,
	"resource/resource_test.go": resourceResource_testGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Dockerfile": &bintree{dockerfile, map[string]*bintree{}},
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"cmd": &bintree{nil, map[string]*bintree{
		"check": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{cmdCheckMainGo, map[string]*bintree{}},
		}},
		"in": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{cmdInMainGo, map[string]*bintree{}},
		}},
		"out": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{cmdOutMainGo, map[string]*bintree{}},
		}},
	}},
	"go.mod": &bintree{goMod, map[string]*bintree{}},
	"pipeline.yml": &bintree{pipelineYml, map[string]*bintree{}},
	"resource": &bintree{nil, map[string]*bintree{
		"resource.go": &bintree{resourceResourceGo, map[string]*bintree{}},
		"resource_test.go": &bintree{resourceResource_testGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

